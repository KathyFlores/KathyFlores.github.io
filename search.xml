<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[2018阿里春招前端实习面试总结]]></title>
      <url>/2018/04/26/2018%E9%98%BF%E9%87%8C%E6%98%A5%E6%8B%9B%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>阿里的面试通知真的是等了太久了。。。老早就内推上去了，一直没有通知，然后在有赞约面试时间之后的一个小时后阿里打来了电话。一面感觉还行，问的问题很基础。</p>
<p>一面：</p>
<ul>
<li>自我介绍</li>
<li>介绍下做过的项目</li>
<li>原型链继承</li>
<li>闭包</li>
<li>js对象深拷贝和浅拷贝（这个问题怎么都问。。。）</li>
<li>如何判断一个变量是不是数组</li>
<li>new 一个function和直接调用一个function的区别</li>
<li>平时在学校的课程有哪些</li>
<li>职业规划</li>
</ul>
<p>…</p>
<p>等二面通知ing…</p>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018有赞春招前端实习面试总结]]></title>
      <url>/2018/04/26/2018%E6%9C%89%E8%B5%9E%E6%98%A5%E6%8B%9B%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>之前投了有赞，了解以后感觉是家挺不错的公司，24号我在机场的时候打来电话约时间面试，最后在25号进行一面。感觉问的还是比较基础的知识，面试官人很nice，整个面试下来感觉不错。</p>
<p>一面：</p>
<ul>
<li>自我介绍</li>
<li>能实习多久</li>
<li>介绍一下最近在做的web服务器项目</li>
<li>http get和post请求的区别（特别问了下使用上的区别）</li>
<li>外包项目里特别提到了双语言实现，能说一下原理吗</li>
<li>js基本数据类型（我说了五个，面试官补充了ES6的symbol）</li>
<li>position属性</li>
<li>js深拷贝</li>
<li>js实习二叉树</li>
<li>原生js要删除一个DOM节点怎么做</li>
<li>apply和call的区别</li>
<li>ES6 ES7有哪些新的内容</li>
<li>如果要学习ES6和ES7需要多久</li>
<li>vue了解吗</li>
<li>css怎么实现一个正方形</li>
<li>最近在学习什么新的技术</li>
</ul>
<p>还有一个问题没理解意思，就不写了。。然后好像还问了其他的，记不太清楚了。</p>
<p>…</p>
<p>二面约在5月4号下午，面完再补充</p>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vivado综合不动的解决过程]]></title>
      <url>/2018/04/20/vivado%E7%BB%BC%E5%90%88%E4%B8%8D%E5%8A%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>今天写I2C的时候发现vivado综合突然出问题了，点击run synthesis以后一直卡在那里不动，.runs里也没有log。退出综合以后控制台报了一个warning：</p>
<p>vivado WARNING: [Vivado 12-1017] Problems encountered: 1. PID not specified</p>
<p>Google了一番发现Xilinx的论坛里也有人遇到这个问题，官方回复是更新vivado。。emmm。。。</p>
<p>后来偶然发现虚拟机里还有一个vivado进程在运行，任务管理器里kill掉就好了。大功告成！:accept:</p>
]]></content>
      
        <categories>
            
            <category> verilog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> verilog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018网易春招前端实习面试]]></title>
      <url>/2018/04/19/2018%E7%BD%91%E6%98%93%E6%98%A5%E6%8B%9B%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>一面很顺利，然鹅二面挂了。。。很心累</p>
<p>一面：</p>
<p>先自我介绍</p>
<ol>
<li>平时怎么学前端？</li>
<li>JS红宝书里前几章内容还记得吗？</li>
<li>变量提升</li>
<li>js深拷贝</li>
<li>实现getType(var a)方法，给出a的类型（字符串形式）</li>
<li>对前端的理解和看法</li>
<li>如果我负责的项目明天就要上线了，但有个问题短时间内无法解决，我要怎么办</li>
</ol>
<p>二面：</p>
<p>依旧自我介绍</p>
<ol>
<li>哪个项目印象最深？为什么</li>
<li>实现多语言的原理</li>
<li>框架用过吗？双向绑定了解吗？</li>
<li>ajax过程</li>
<li>promise了解吗</li>
<li>（还问了个问题，我没听过，现在想不起来了。。）</li>
<li>模块化了解吗</li>
<li>array的api用过哪些？（详细问了reduce）</li>
<li>css的flex布局了解吗</li>
<li>css的position有哪几种</li>
<li>实现一个布局（左右两栏，左边是商品介绍，右边是商品图片）</li>
</ol>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018拼多多春招前端实习笔试]]></title>
      <url>/2018/04/03/2018%E6%8B%BC%E5%A4%9A%E5%A4%9A%E6%98%A5%E6%8B%9B%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AF%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>相比网易的笔试，拼多多笔试显得“简单”很多。可能因为基础考的不那么多吧，主要侧重点还是js了，所以做的相对顺手一点。考试时间一个半小时，我一个小时做完，甚至还把题目都抄了下来。。。</p>
</blockquote>
<h3 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h3><p>三类：单项选择题（16道，45分），不定项选择题（5道，25分），问答题（2道，30分）。</p>
<h3 id="题目回忆"><a href="#题目回忆" class="headerlink" title="题目回忆"></a>题目回忆</h3><h4 id="单项选择"><a href="#单项选择" class="headerlink" title="单项选择"></a>单项选择</h4><ol>
<li><p>给出以下js代码的输出结果：</p>
<pre><code class="javascript">(function(x){
    delete x;
    return x;
})(2);
</code></pre>
<ul>
<li>出错</li>
<li>NaN</li>
<li><strong>2</strong></li>
<li>undefined</li>
</ul>
<p>——</p>
<p>delete不删除变量或函数，删除的是对象上的属性。这里copy一下mdn上的描述：</p>
<blockquote>
<p>与通常对 delete 的理解不同，delete 操作符与直接释放内存<strong>无关</strong>。内存管理 通过断开引用来间接完成的，查看<a href="https://developer.mozilla.org/zh-CNdocs/Web/JavaScript/Memory_Management" target="_blank" rel="noopener">内存管理</a>页可了解详情。</p>
<p><strong>delete</strong> 操作符会从某个对象上移除指定属性。成功删除的时候回返回 <code>true</code>，否则返回 <code>false</code>。但是，以下情况需要重点考虑：</p>
<ul>
<li><p>如果你试图删除的属性不存在，那么delete将不会起任何作用，但仍会返回true</p>
</li>
<li><p>如果对象的原型链上有一个与待删除属性同名的属性，那么删除属性之后，对象会使用原型链上的那个属性（也就是说，delete操作只会在自身的属性上起作用）</p>
</li>
<li><p>任何使用 </p>
<p><code>var</code></p>
<p>声明的属性不能从全局作用域或函数的作用域中删除。</p>
<ul>
<li>这样的话，delete操作不能删除任何在全局作用域中的函数（无论这个函数是来自于函数声明或函数表达式）</li>
<li>除了在全局作用域中的函数不能被删除，在对象(object)中的函数是能够用delete操作删除的。</li>
</ul>
</li>
<li><p>任何用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="noopener"><code>let</code></a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const" target="_blank" rel="noopener"><code>const</code></a>声明的属性不能够从它被声明的作用域中删除。</p>
</li>
<li><p>不可设置的(Non-configurable)属性不能被移除。这意味着像<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math" target="_blank" rel="noopener"><code>Math</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array" target="_blank" rel="noopener"><code>Array</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noopener"><code>Object</code></a>内置对象的属性以及使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener"><code>Object.defineProperty()</code></a>方法设置为不可设置的属性不能被删除。</p>
</li>
</ul>
</blockquote>
<p>​</p>
</li>
<li><p>给出以下js代码，对某个input标签进行点击，输出结果是</p>
<pre><code class="javascript">input.onmousedown = function(){
    console.log(&#39;mousedown&#39;);
}
input.onmouseup = function(){
    console.log(&#39;mouseon&#39;);
}
input.onclick = function(){
    console.log(&#39;click&#39;);
}
input.onfocus = function(){
    console.log(&#39;focus&#39;);
}
</code></pre>
<ul>
<li>mousedown mouse focus click</li>
<li>mousedown click mouseup focus</li>
<li><strong>mousedown focus mouseup click</strong></li>
<li>mousedown mouseup click focus</li>
</ul>
<p>——</p>
<p>本题考的是鼠标行为触发顺序，按照C的顺序来</p>
</li>
<li><p>对于盒模型的描述</p>
<ul>
<li><strong>标准盒模型的总宽度：width+margin+border+padding</strong></li>
<li>IE盒模型的总宽度：width+margin+border+padding</li>
<li>IE盒模型的总宽度：width</li>
<li>标准盒模型的总宽度：width+margin+border</li>
</ul>
<p>——</p>
<p>本题考的是盒模型，标准盒模型宽度：元素的width和height属性只包含内容content部分，不包含内边距padding和边框border部分，即总宽度=width+margin+border+padding；而IE盒模型：元素的width和height属性同时包含内容content，内边距padding和边框border部分，即： width = content + padding + border，则总宽度为width+margin</p>
</li>
<li><pre><code class="javascript">function fn(){
    this.a=0;
    this.b=function(){return this.a;}
}
fn.prototype = {
    b: function(){
        this.a=1;
        return this.a;
    },
    c: function(){
        this.a=2;
        return this.a;
    }

}
var myfn = new fn();
console.log(myfn.b());
console.log(myfn.c());
</code></pre>
<ul>
<li>Undefined, 2</li>
<li>0, 1</li>
<li>1, 2</li>
<li><strong>0, 2</strong></li>
</ul>
<p>——</p>
<p>感觉这道题没什么说的，考的是prototype，有oop思想即可。</p>
</li>
<li><pre><code class="javascript">let {a, b, ...c} = {a:1, b:2, u:3, v:4};
console.log(c);
</code></pre>
<ul>
<li>[Object, Object]</li>
<li><strong>{u:3, v:4}</strong></li>
<li>3</li>
<li>4</li>
</ul>
<p>——</p>
<p>解构赋值和rest参数了解一下</p>
</li>
<li><pre><code class="javascript">const a = [1,2,3]; 
a.splice(2,1,4);
console.log(a[a.length-1]);
</code></pre>
<ul>
<li><strong>4</strong></li>
<li>3</li>
<li>1</li>
<li>2</li>
</ul>
<p>——</p>
<p>const用法问题，常量索引，不是说值不可变</p>
</li>
<li><p>如何让Hello world看不见？</p>
<pre><code class="html">&lt;div class=&quot;one&quot;&gt;
    Hello world
&lt;/div&gt;
</code></pre>
<ul>
<li>三者都对</li>
<li><strong>.one {opacity:0;}</strong></li>
<li>.one {width:0; height:0;}</li>
<li>.one {z-index:-100;}</li>
</ul>
<p>——</p>
<p>z-index仅对于absolute元素有效；C的话文字溢出了，若将overflow设为hidden即看不见。</p>
</li>
<li><p>下列哪个选项可以正确的创建日期对象且没有兼容性问题？</p>
<ul>
<li>new Date(‘2017-06-25 12:12:12’);</li>
<li>new Date(‘2017/06/25 12:12:12’);</li>
<li>new Date(‘1500962729312’);</li>
<li><strong>new Date(2017,6,25,12,12,12);</strong></li>
</ul>
<p>——</p>
<p>考点Date构造函数接受的参数，C如果不是字符串就对了</p>
</li>
<li><pre><code class="javascript">var a1 =111;
console.log(a1);
console.log(a2);
console.log(a3);
var a2 = 222;
a3 = 333;
</code></pre>
<ul>
<li>111 undefined undeifined</li>
<li>111 出错 undefined</li>
<li>111 222 333</li>
<li><strong>111 undefined 出错</strong></li>
</ul>
<p>——</p>
<p>变量提升了解一下</p>
</li>
<li><p>对于url：<a href="http://127.0.0.1:3000/" target="_blank" rel="noopener">http://127.0.0.1:3000/</a> ，以下哪个是它的hostname？</p>
<ul>
<li>//127.0.0.1</li>
<li>127.0.0.1:3000/</li>
<li><strong>127.0.0.1</strong></li>
<li>127.0.0.1:3000</li>
</ul>
<p>——</p>
<p>。。。</p>
</li>
<li><p>如何阻止这个元素的默认跳转事件？</p>
<pre><code class="html">&lt;a id=&quot;testId&quot; href=&quot;https://www.pinduoduo.com/&quot;&gt;
    hello world
&lt;/a&gt;
</code></pre>
<ul>
<li>都可以</li>
<li><strong>a.onclick = function(e){preventDefault(e);}</strong></li>
<li>a.onmousedown = function(e){preventDefault(e)};</li>
<li>a.onmouseup = function(e){preventDefault(e)};</li>
</ul>
<p>——</p>
<p>组织a标签跳转的方法要在onclick中实现</p>
</li>
<li><pre><code class="javascript">a=1;
delete a;
console.log(typeof a);
var b=1;
delete b;
console.log(typeof b);
</code></pre>
<ul>
<li><strong>number number</strong></li>
<li>undefined number</li>
<li>number undefined</li>
<li>undefined undefined</li>
</ul>
<p>——</p>
<p>delete不能删除变量</p>
</li>
<li><p>下列哪个选项不属于浏览器存储？</p>
<ul>
<li><strong>session</strong></li>
<li>sessionStorage</li>
<li>cookie</li>
<li>localStorage</li>
</ul>
<p>——</p>
<p>浏览器存储数据的方式有三种：BCD</p>
</li>
<li><pre><code class="javascript">function test(a,b,c){
    a=a*10;
    b.item=5;
    c={item:5};
}
var x = 10;
var y = {item:10};
var z = {item:10};
test(x,y,z);
console.log(x);
console.log(y.item);
console.log(z.item);
</code></pre>
<ul>
<li><strong>10 5 10</strong></li>
<li>10 10 10</li>
<li>10 5 5</li>
<li>10 10 5</li>
</ul>
<p>——</p>
<p>js参数传递的问题</p>
</li>
<li><pre><code class="javascript">var a = {};
b={key:&#39;b&#39;};
c={key:&#39;c&#39;};
a[b]=123;
a[c]=456;
console.log(a[b]);
</code></pre>
<ul>
<li><strong>456</strong></li>
<li>123</li>
<li>B</li>
<li>C</li>
</ul>
<p>——</p>
<p>这题选A，我没做对。。具体参考<a href="https://blog.csdn.net/hellokingqwe/article/details/52688017" target="_blank" rel="noopener">csdn</a></p>
</li>
<li><p>DOM创建新节点的方法没有以下哪一项</p>
<ul>
<li>createTextNode</li>
<li><strong>createNode</strong></li>
<li>createDocumentFragment</li>
<li>createElement</li>
</ul>
</li>
</ol>
<h4 id="不定项选择"><a href="#不定项选择" class="headerlink" title="不定项选择"></a>不定项选择</h4><p>不确定正确与否，就不加粗答案了</p>
<ol>
<li><p>关于HTTP2.0的说法</p>
<ul>
<li>开始支持长连接</li>
<li>服务器推送</li>
<li>同一个连接可并发处理多请求</li>
<li>使用gzip算法对header压缩</li>
</ul>
</li>
<li><p>以下哪些事件会触发reflow</p>
<ul>
<li>改变窗口大小</li>
<li>display:none</li>
<li>改变元素宽高</li>
<li>改变font-size</li>
</ul>
<p>——</p>
<p><strong>触发repaint</strong></p>
<p>color的修改，如color=#ddd；</p>
<p>text-align的修改，如text-align=center；</p>
<p>a:hover也会造成重绘。</p>
<p>:hover引起的颜色等不导致页面回流的style变动。</p>
<p>​</p>
<p><strong>触发reflow</strong></p>
<p>调整窗口大小（Resizing the window）</p>
<p>改变字体（Changing the font）</p>
<p>增加或者移除样式表（Adding or removing a stylesheet）</p>
<p>内容变化，比如用户在input框中输入文字（Content changes, such as a user typing text in an input box）</p>
<p>激活 CSS 伪类，比如 :hover (IE 中为兄弟结点伪类的激活)（Activation of CSS pseudo classes such as :hover (in IE the activation of the pseudo class of a sibling)）</p>
<p>操作 class 属性（Manipulating the class attribute）</p>
<p>脚本操作 DOM（A script manipulating the DOM）</p>
<p>计算 offsetWidth 和 offsetHeight 属性（Calculating offsetWidth and offsetHeight）</p>
<p>设置 style 属性的值 （Setting a property of the style attribute）</p>
<p>​    </p>
</li>
<li><p>选正确的：</p>
<ul>
<li>IE中attachEvent中的this总指向函数的直接调用者</li>
<li><strong>this总指向函数的非间接调用者</strong></li>
<li><strong>若有new关键字，则this指向new出的对象</strong></li>
<li><strong>this总指向函数的直接调用者</strong></li>
</ul>
<p>——</p>
<p>A中IE中的attachEvent中的this总是指向全局对象Window</p>
</li>
<li><p>http状态码描述正确的有</p>
<ul>
<li>404 Not Found 无法找到资源</li>
<li>401 Unauthorized 禁止访问</li>
<li>304 Not Modified 未修改</li>
<li>400 Bad Request 无法理解请求格式</li>
</ul>
</li>
<li><p>不稳定的排序算法有：</p>
<ul>
<li><strong>选择排序</strong></li>
<li>冒泡排序</li>
<li>插入排序</li>
<li><strong>快速排序</strong></li>
</ul>
</li>
</ol>
<h4 id="问答题"><a href="#问答题" class="headerlink" title="问答题"></a>问答题</h4><ol>
<li><p>使用js实现randomStr(n)方法，使其生成长度为n的随机字符串，字符集：[a-z][A-Z][0-9]和’+’，’=’共64个字符</p>
<pre><code class="javascript">randomStr = function(n){
    charset = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;,&#39;n&#39;,&#39;o&#39;,&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;I&#39;,&#39;J&#39;,&#39;K&#39;,&#39;L&#39;,&#39;M&#39;,&#39;N&#39;,&#39;O&#39;,&#39;P&#39;,&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;,&#39;T&#39;,&#39;U&#39;,&#39;V&#39;,&#39;W&#39;,&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;,&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,&#39;+&#39;,&#39;=&#39;];
    var res = &#39;&#39;;
    for(var i =0;i&lt;n;i++){
        res+=charset[parseInt(Math.random()*64)];
    }
    return res;
}
</code></pre>
</li>
<li><p>使用js实现归并排序，合并两个有序数列</p>
<p>太简单了不写了。。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018网易春招前端实习笔试]]></title>
      <url>/2018/03/28/2018%E7%BD%91%E6%98%93%E6%98%A5%E6%8B%9B%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>先谈感想：基本功不扎实，不好好学习的下场终于来了……还是要打好基础啊</p>
<hr>
<h3 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h3><p>三类：选择题（20道，20分），编程题（3道，60分），问答题（2道，20分）。</p>
<h3 id="题目回忆"><a href="#题目回忆" class="headerlink" title="题目回忆"></a>题目回忆</h3><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>这里按照考点内容简单分类</p>
<ol>
<li>【操作系统】进程与线程</li>
<li>【数据结构】一棵度为4的树有10个节点，选项：<ul>
<li>高度至多6，</li>
<li>高度至多7，</li>
<li>高度至少6，</li>
<li>高度至少7.</li>
</ul>
</li>
<li>【数据结构】希尔排序，问增量取5的第一趟排序结果</li>
<li>【数据结构】快速排序，问哪个选项不可能是第二趟快速排序的结果</li>
<li>【数据结构】一棵二叉树的中序遍历是abcdef，高度最小的不可能的二叉树前序遍历是（dbacfe，cbaedf，cabefd，dbacef）</li>
<li>【数据结构】查找二叉树，为了查找321的节点，不可能出现的查找序列</li>
<li>【数据结构+信安】哈希算法在信息安全中的应用，给(1)(2)(3)三个应用场景，四个选项中对其进行排列组合，选出正确的一个</li>
<li>【计网】关于电子邮件说法不正确的是：<ul>
<li>POPs的特点是只要用户从服务器上读取了邮件，就把该邮件删除；</li>
<li>IMAP协议不支持创建自定义的文件；</li>
<li>IMAP协议中客户端和服务器上的邮件保持同步；</li>
<li>SMTP能发送ASCii码和二进制文件。</li>
</ul>
</li>
<li>【计网】关于UDP通信，选不正确的</li>
<li>【计网】关于http1.1和http1.0，选不正确的。记得两个选项：<ul>
<li>http1.0只能短连接，http1.1只能长连接</li>
<li>http1.1增加host字段</li>
</ul>
</li>
<li>【计网】关于http说法不正确的：<ul>
<li>304表示临时重定向；</li>
<li>range请求响应一定是用Http状态码206表示成功；</li>
<li>Http header分隔符是\r；</li>
<li>请求如果包含%，需进行encode。</li>
</ul>
</li>
<li>【html+css】CSS2中的outline说法，选不正确的（有一个选项是outline-width为auto和为0px的效果一样）</li>
<li>【html+css】有关margin，具体不记得了</li>
<li>【html+css】有关svg，记得一个选项：svg使用XML格式定义图像</li>
<li>【html+css】a:hover,a:visited,a:active,a:link，总之记住L-V-H-A即可</li>
<li>【html+css】css定位，记得三个选项：<ul>
<li>relative可以基于absoluate定位</li>
<li>absolute基于最近的static定位</li>
<li>子元素不能继承父元素的position</li>
</ul>
</li>
<li>【js】a不是空数组，且b===a，哪个选项使a.length和b.length都为0，记得三个：<ul>
<li>b.length=0</li>
<li>a.splice(0,a.length)</li>
<li>a.slice(a.length)</li>
</ul>
</li>
<li>【js】数组操作，选错误的，其中三个选项分别考了unshift、concat、join</li>
<li>【其他】cookie和localstorage，选错误的，有个选项是在与服务器通信时，两者都会携带在http头中</li>
<li>【其他】json</li>
</ol>
<h4 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h4><ol>
<li><p>出门朝北，左右转向，输出最后朝向的方向</p>
<p><strong>输入：</strong>转方向的次数N，长度为N的字符串，由L,R组成，L表示左转，R表示右转；</p>
<p><strong>输出：</strong>   此时面朝的方向</p>
</li>
<li><p>x,y均不大于n，并且x除以y的余数大于等于k （1&lt;=n&lt;=10^5, 0&lt;=k&lt;=n-1），求满足要求的数对(x,y)数量</p>
<p><strong>输入：</strong>n,k</p>
<p><strong>输出：</strong>满足要求的数对数量</p>
</li>
<li><p>神奇数列 ：1，12，123，..，12345678910，1234567891011，求从数列l~r（l，r是从1开始的下标）有多少个能被3整除</p>
<p><strong>输入：</strong>l,r</p>
<p><strong>输出：</strong>这一区间能被3整除的个数</p>
</li>
</ol>
<h4 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h4><ol>
<li><p>列举使用过的前端性能优化方案，描述场景并详细介绍。</p>
</li>
<li><p>公司放映系统最近要上线一个【预订随机推荐电影】功能，每天用户通过系统预订名额，由系统每日推荐一部电影，按时推送到用户。现在，在系统已有如下异步方法封装的前提下： </p>
<ul>
<li>getTodayUsers(callback):获取今日预定的用户id列表，使用如下：getTodayUsers(userIds=&gt;{ console.log(userIds)})，即回调中拿到用户id列表      </li>
<li>getTodayMovie(callback):获取今日推荐的电影id，使用如下：getTodayMovie( movieId=&gt;{ console.log(movieId )})，即回调中拿到今日的电影id      </li>
<li>bookMovieForUsers(userIds, movieId, callback)：使用用户id列表预订某部电影，使用如下bookMovieForUsers([1, 2, 3], 1000, ()=&gt;{console.log(“预订成功了”)})     </li>
</ul>
<p>请封装一个bookTodayMovieForTodayUser()的方法，它的作用是为今天预订的用户订阅今天系统推荐的电影，它返回一个promise，这个promise在请求后被resolve，使用方法如下：bookTodayMovieForTodayUser().then( ()=&gt;console.log(“预订成功”))。注：简单起见，所有情况都不需考虑失败情况</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[外包项目总结]]></title>
      <url>/2018/03/26/%E5%A4%96%E5%8C%85%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>去年年末时脑子一抽接了个外包，甲方是浙财的大二的一个创业团队，对技术方面完全不懂，整个过程有点迷。。还好任务难度不大，主要是做一个外国人在国内求职的信息聚合网站，整个开发过程历时半个月，在此将开发过程中遇到的问题记录下来。</p>
</blockquote>
<h4 id="Goals（copy甲方的要求）"><a href="#Goals（copy甲方的要求）" class="headerlink" title="Goals（copy甲方的要求）"></a>Goals（copy甲方的要求）</h4><ol>
<li><p>收集应聘者的个人资料，包括自我简介、简历以及自我介绍的视频。网站上有上传文本和视频的功能，应聘者可以自行上传资料，后台自动打包保存在服务器里。为了保证人才的质量，后台需具备人工筛选的功能，符合最低要求的简历和处理过视频内敏感信息的视频会由后台再放在网站上，供客户浏览挑选。如果有符合客户要求的应聘者的资料，客户可以选择信息的收藏和下载。这是一个收集信息再放出信息的过程。</p>
<p>以下是一些具体细节：</p>
<ul>
<li>上传：应聘者通过网站自带模版填写相应的简介后保存，大致包括姓名、性别、年龄、国籍、学历、专业、意向岗位等，并上传简历和视频。自我介绍的视频时长不超过2分钟，格式要求mp4（或者方便网页使用的）。简历以word或者pdf形式上传。</li>
<li>视频观看：后台先筛选之后才能放在平台上供客户查看，视频播放中有播放进度控制按钮、暂停键和全屏与缩小选项。</li>
<li>检索：需要设计一个检索，将应聘者按地区，国籍进行分类，同时也应该有一个搜索栏，可以直接搜索国籍地区，用于方便客户查找。对留学生信息的检索。设置洲和国家二级栏目。</li>
</ul>
</li>
<li><p>网站还要能放上企业的招聘公告，这是雇主与雇员双方信息交互的过程。招聘公告通过岗位分类，也可以通过岗位进行检索。网站界面上还应设置公示栏，公开宣布企业与雇员配对成功的案例，以此来振奋人心，吸引人气！</p>
</li>
</ol>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>​    Django1.8 + python3</p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol>
<li><p>采用默认用户认证系统条件下创建两种用户类型</p>
<ul>
<li><p>参照<a href="https://stackoverflow.com/questions/9650133/django-multiple-user-profiles" target="_blank" rel="noopener">stackoverflow</a>的回答，首先自定义一个UserProfile类</p>
<pre><code class="python">from django.db import models
from django.contrib.auth.models import AbstractUser
from django.db.models.signals import post_save
from django.utils.translation import ugettext_lazy as _
# Create your models here.

class UserProfile(AbstractUser):
    USER_TYPE = ((0,&#39;Jobseeker&#39;),(1,&#39;Employer&#39;))
    isEmployer = models.BooleanField(choices=USER_TYPE,default=0)
</code></pre>
</li>
<li><p>接着定义两种用户类型，其中一个字段是与UserProfile一一映射</p>
<pre><code class="python">class Jobseeker(models.Model):
    user = models.OneToOneField(UserProfile, on_delete=models.CASCADE, primary_key=True)
    ...
</code></pre>
<pre><code class="python">class Employer(models.Model):
    user = models.OneToOneField(UserProfile, on_delete=models.CASCADE, primary_key=True)
    ...
</code></pre>
</li>
<li><p>⚠️注意：要将settings.py中的用户类型修改为UserProfile</p>
<pre><code class="python">AUTH_USER_MODEL = &#39;accounts.UserProfile&#39;
</code></pre>
</li>
<li><p>修改注册的form：</p>
<pre><code class="python">from django import forms
from django.db import transaction
from django.contrib.auth.forms import UserCreationForm,
from .models import UserProfile,Jobseeker,Employer

class SignupForm(UserCreationForm):
    typechoice=forms.ChoiceField(label=_(&#39;User Type&#39;),choices=((0,_(&#39;Jobseeker&#39;)),(1,_(&#39;Employer&#39;))),widget=forms.RadioSelect)
    class Meta:
        model = UserProfile
        fields = (&#39;username&#39;,&#39;email&#39;,&#39;password1&#39;,&#39;password2&#39;)
    @transaction.atomic
    def save(self):
        user = super().save(commit=False)
        user.isEmployer=int(self.cleaned_data.get(&#39;typechoice&#39;))
        #print(type(user.isEmployer))
        user.save()
        if user.isEmployer:
            Employer.objects.create(user=user)
        else:
            Jobseeker.objects.create(user=user)

        return user
</code></pre>
</li>
</ul>
</li>
<li><p>国际化</p>
<ul>
<li><p>参照<a href="https://code.ziqiangxuetang.com/django/django-internationalization.html" target="_blank" rel="noopener">自强学堂</a>和<a href="https://docs.djangoproject.com/en/1.8/topics/i18n/" target="_blank" rel="noopener">django文档</a></p>
</li>
<li><p>//Mac上配置gettext（参照<a href="https://stackoverflow.com/questions/27220052/django-i18n-make-sure-you-have-gnu-gettext-tools" target="_blank" rel="noopener">stackoverflow</a>）</p>
<pre><code class="shell">brew install gettext
brew link gettext --force
</code></pre>
<p>ps.第二句不安全，本应按照高赞回答来的，但是为了省事还是选择了不安全的做法……</p>
</li>
<li><p>在settings.py中进行如下设置：</p>
<pre><code class="python">MIDDLEWARE_CLASSES = ( 
    ...
    &#39;django.middleware.locale.LocaleMiddleware&#39;,
    ...
)
...
TEMPLATES = [
    {
        ...
        &#39;OPTIONS&#39;: {
            &#39;context_processors&#39;: [

                &#39;django.template.context_processors.debug&#39;,
                &#39;django.template.context_processors.request&#39;,
                &#39;django.template.context_processors.media&#39;,
                &#39;django.contrib.auth.context_processors.auth&#39;,
                &#39;django.contrib.messages.context_processors.messages&#39;,
                &#39;django.core.context_processors.i18n&#39;, # 重点是这个
            ],
        },
    },
]
LANGUAGE_CODE = &#39;zh-hans&#39;

TIME_ZONE = &#39;Asia/Shanghai&#39;

USE_I18N = True

USE_L10N = True

USE_TZ = True
LANGUAGES = (
    (&#39;en&#39;, _(&#39;English&#39;)),
    (&#39;zh-cn&#39;, _(&#39;Chinese&#39;)),

)
LOCALE_PATHS = (
    os.path.join(BASE_DIR, &#39;locale&#39;),
)
</code></pre>
</li>
<li><p>开发过程中的翻译</p>
<p>在urls.py中加入：</p>
<pre><code class="Python">urlpatterns = [
    url(r&#39;^i18n/&#39;, include(&#39;django.conf.urls.i18n&#39;)),
      ...
]
</code></pre>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>import ugettext_lazy（不知道为啥起初我试ugettext就不起作用），需要翻译的字符串用_()包裹</p>
<pre><code class="python">from django.utils.translation import ugettext_lazy as _
class Job(models.Model):
    typeChoices = (
        (&#39;Fulltime&#39;,_(&#39;Full Time&#39;)),
        (&#39;Parttime&#39;,_(&#39;Part Time&#39;)),
        (&#39;Intern&#39;,_(&#39;Intern&#39;)),
        (&#39;Freelance&#39;,_(&#39;Freelance&#39;)),
    )
</code></pre>
<h4 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h4><p>每个模板（注意是每个）前都加上</p>
<pre><code class="django">{% load i18n %}
</code></pre>
<p>需要翻译的字符串使用&#123; % trans % &#125;标签包裹</p>
<pre><code class="django">{% trans 'Job Type' %}
</code></pre>
<h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><p>在根目录的urls.py下加入</p>
<pre><code class="python">from django.views.i18n import javascript_catalog

js_info_dict = {
    &#39;packages&#39;: (&#39;jobsite&#39;,),
}

urlpatterns += [
    url(r&#39;^jsi18n/$&#39;, javascript_catalog, js_info_dict, name=&quot;js_catalog&quot;),
]
</code></pre>
<p>然后在需要翻译的页面中加入</p>
<pre><code class="Django">&lt;script type=&quot;text/javascript&quot; src=&quot;{% url 'js_catalog' %}&quot;&gt;&lt;/script&gt;
</code></pre>
<p>待翻译的字符串用gettext()函数包裹</p>
<pre><code class="javascript">function(json) {
  console.log(json);
  if (json[&#39;res&#39;] == 1) {
    $(&#39;#modalContent&#39;).text(gettext(&quot;Successfully applied!&quot;));
  } else if (json[&#39;res&#39;] == 0) {
    $(&#39;#modalContent&#39;).text(gettext(&quot;You should log in first!&quot;));
  } else if (json[&#39;res&#39;] == 2) {
    $(&#39;#modalContent&#39;).text(gettext(&quot;You have applied for this job first!&quot;));
  } else if (json[&#39;res&#39;] == 3) {
    $(&#39;#modalContent&#39;).text(gettext(&quot;Your information has not been reviewed!&quot;));
  }
},
</code></pre>
</li>
<li><p>生成.po。</p>
<p>⚠️：中文一定要用zh_Hans，zh-cn、zh_CN、zh-hans等都是不对的（不过我也不知道为什么在本地开发时使用zh_hans也是ok的）。</p>
<p>后面加上-i venv是防止将虚拟运行环境中的待翻译字符串也一并加载进来</p>
<pre><code class="shell">python3 manage.py makemessages -l zh_Hans -i venv
python3 manage.py makemessages -l en -i venv
</code></pre>
<p>第一次创建目录以后再生成就可以不用这么麻烦了，直接</p>
<pre><code class="shell">python3 manage.py makemessages -a -i venv
</code></pre>
<p>但对于js，以上命令不适用，应使用</p>
<pre><code class="shell">python3 manage.py makemessages -e html,js -d djangojs -i venv
</code></pre>
</li>
<li><p>在locale目录下生成的.po文件中进行翻译，比如：</p>
<pre><code class="gettext">#: jobsite/templates/jobsite/base.html:94
msgid &quot;Home&quot;
msgstr &quot;主页&quot;
</code></pre>
<p>⚠️：包含#, fuzzy的词条不会正常翻译，应手动更改后删除#, fuzzy。</p>
</li>
<li><p>编译生成的.po</p>
<pre><code class="shell">python3 manage.py compilemessages
</code></pre>
<p>编译好以后应该可以正常显示了</p>
</li>
<li><p>留出一个切换语言的接口</p>
<pre><code class="html">&lt;form class=&quot;form-inline&quot; name=&quot;langform&quot; id=&quot;langform&quot; method=&#39;post&#39;&gt;
  {% csrf_token %}
  &lt;select class=&quot;form-control&quot; id=&quot;language&quot; name=&quot;language&quot; onchange=&quot;selectdo(this)&quot;&gt;
    &lt;option value=&quot;1&quot; &gt;Language: 
      {% get_language_info for LANGUAGE_CODE as lang %}
      {{ lang.name_local }}
    &lt;/option&gt;
    {% for lang in LANGUAGES %}
         <option value="{{ lang.0 }}"> {{ lang.1 }}</option>
         {% endfor %}
  &lt;/select&gt;
&lt;/form&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
  function selectdo(obj) {
    str = &quot;/i18n/setlang/&quot;;
    myform = document.getElementById(&#39;langform&#39;);
    myform.method = &quot;POST&quot;;
    myform.action = str;
    myform.submit();
  }
&lt;/script&gt;
</code></pre>
</li>
</ul>
</li>
<li><p>部署到服务器时发现无法访问静态文件，在urls.py中加入</p>
<pre><code class="python">from django.conf import settings
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
</code></pre>
<p>同时在/etc/nginx/sites-available/目录下添加ywzy.conf：</p>
<pre><code class="nginx">server {
    listen      80;
    server_name localhost;
    charset     utf-8;

    client_max_body_size 2G;
    keepalive_timeout 5;
    location /media  {
        alias /var/www/html/ywzy/media;
    }

    location /static {
        alias /var/www/html/ywzy/static;
    } 

    location / {
        proxy_pass  http://127.0.0.1:8001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        include     /etc/nginx/uwsgi_params;
    }
}
</code></pre>
<p>然后链接至启用站点目录下</p>
<pre><code class="shell">sudo ln -s /etc/nginx/sites-available/ywzy.conf /etc/nginx/sites-enabled/ywzy.conf
rm /etc/nginx/sites-enables/default
</code></pre>
<p>重启nginx</p>
<pre><code class="shell">sudo service nginx restart
</code></pre>
</li>
<li><p>部署的过程中尝试了uwsgi（自强学堂推荐的），但不知道为什么总是报错，就用了gunicorn替代（这里gevent需要pip安装一下）</p>
<pre><code class="shell">gunicorn --chdir /var/www/html/ywzy --pythonpath venv/ --worker-class=gevent -b0.0.0.0:8001 -w4 ywzy.wsgi:application
</code></pre>
<p>管理进程也尝试了supervisor，但发现不支持pyhton3…于是使用nohup，日志记录在nohup.out中</p>
<pre><code class="shell">nohup gunicorn --chdir /var/www/html/ywzy --pythonpath venv/ --worker-class=gevent -b0.0.0.0:8001 -w4 ywzy.wsgi:application&amp;
</code></pre>
</li>
<li><p>服务器部署阶段还遇到了关于python版本和pip版本不对的问题。。。再加上有虚拟运行环境，这类问题频繁出现，最后发现只要保证启用虚拟运行环境以后运行python使用python3命令，运行pip使用pip3命令，大部分问题都能解决，面向google编程……</p>
</li>
</ol>
<h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>​    我还是太菜了……本以为能很快做完的……看来还需要努力</p>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客搭建-material主题下评论系统完善]]></title>
      <url>/2018/02/20/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-material%E4%B8%BB%E9%A2%98%E4%B8%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%AE%8C%E5%96%84/</url>
      <content type="html"><![CDATA[<p>博客搭建至今，共尝试使用过很多个评论系统（如disqus、多说、gitment、gitalk等），我对评论系统大致有以下三点要求：1. 不用翻墙 2. 无需备案 3. 方便快捷。综合考虑，原本多说是比较好的一个选择，但是由于种种原因，多说在2017年6月已经关闭服务了，我便采用了disqus，但是奈何需要翻墙，总是让我这个强迫症有一点不爽。直到放了寒假，要把博客数据挪到mac上时才发现有了gitment和gitalk这两款利用github的issue功能搭建起来的轻便版评论系统，正合我意啊！因此便开始了不到黄河心不死，不撞南墙不回头的瞎鼓捣之旅。。。</p>
<h3 id="gitment与gitalk比较"><a href="#gitment与gitalk比较" class="headerlink" title="gitment与gitalk比较"></a>gitment与gitalk比较</h3><p><strong>同</strong></p>
<ul>
<li>均在前端直接引入，不需要后端代码</li>
<li>支持md、gfm和代码高亮</li>
<li>使用github账号登陆</li>
</ul>
<p><strong>异</strong></p>
<ul>
<li>gitment需要手动初始化每一篇的评论，而gitalk不需要</li>
</ul>
<p>虽然我的文章也不算多，但是由于实在太懒，便选择了gitalk。</p>
<p>链接附上：</p>
<p>gitment <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">https://github.com/imsun/gitment</a></p>
<p>gitalk <a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">https://github.com/gitalk/gitalk</a></p>
<h3 id="gitalk配置过程"><a href="#gitalk配置过程" class="headerlink" title="gitalk配置过程"></a>gitalk配置过程</h3><p>详细的配置过程如其github的readme，由于我用的material主题内嵌了这两个评论系统，配置过程不大一样，便在此说明。</p>
<h4 id="1-注册-OAuth-Application"><a href="#1-注册-OAuth-Application" class="headerlink" title="1. 注册 OAuth Application"></a>1. 注册 OAuth Application</h4><p><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击此处</a> 来注册一个新的 OAuth Application。如实填写，注意最后一个callback url要填写自己博客的url。注册成功后得到一个client ID和client secret。</p>
<h4 id="2-在material主题配置文件中修改相关配置"><a href="#2-在material主题配置文件中修改相关配置" class="headerlink" title="2. 在material主题配置文件中修改相关配置"></a>2. 在material主题配置文件中修改相关配置</h4><pre><code class="yaml"># themes/material/_config.yml
...
comment:
    use: &quot;gitalk&quot;

    ...
    # gitment配置同gitalk
    gitment_repo: KathyFlores.github.io  # git repo of the hexo
    gitment_owner: KathyFlores # git repo&#39;s owner
    gitment_client_id: xxx # github app client id 第一步中得到的client ID
    gitment_client_secret : xxx # github app client secret 第一步中得到的client secret
    ...

    gitalk_repo: KathyFlores.github.io # git repo of the hexo
    gitalk_owner: KathyFlores # git repo&#39;s owner
    gitalk_client_id: xxx # github app client id 第一步中得到的client ID
    gitalk_client_secret: xxx # github app client secret 第一步中得到的client secret
...
</code></pre>
<h4 id="3-部署"><a href="#3-部署" class="headerlink" title="3. 部署"></a>3. 部署</h4><p>正常情况下，部署以后就会看到文章下成功出现了gitalk评论系统，登陆github账户以后也可以正常评论。但是我在实践过程中遇到了一个谜一样的报错：Error: Validation Failed。去gitalk项目的issue区看了看有一个人和我遇到了同样的问题，但不知道是什么原因，后来我发现是因为创建gitalk时会将当前post的url作为label创建一个issue，而issue的label长度最大只支持50个字符，如果文章标题有过多中文或长度太长，都会产生这个问题。</p>
<p>后续issue区有人提出，自行设定创建gitalk的id参数即可，可以用md5对url进行加密，也可直接截取前50个字符。我为了方便，选择了截取文章标题的前49个字符，在material主题下，只需修改themes/material/layout/_widget/gitalk/main.ejs:</p>
<pre><code class="ejs">&lt;!-- Gitalk 评论框 --&gt;
&lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;

&lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
    var gitalk = new Gitalk({
            clientID: &#39;&lt;%= theme.comment.gitalk_client_id %&gt;&#39;,
            clientSecret: &#39;&lt;%= theme.comment.gitalk_client_secret %&gt;&#39;,
            repo: &#39;&lt;%= theme.comment.gitalk_repo %&gt;&#39;,
            owner: &#39;&lt;%= theme.comment.gitalk_owner %&gt;&#39;,
            admin: [&#39;&lt;%= theme.comment.gitalk_owner %&gt;&#39;],
            // facebook-like distraction free mode
            id: &#39;&lt;%=  page.title.substr(0,48) %&gt;&#39;, // 加了这一行
            distractionFreeMode: false
        })
   gitalk.render(&#39;gitalk-container&#39;)
&lt;/script&gt;
</code></pre>
<p>若使用gitment，具体做法类似，修改themes/material/layout/_widget/gitment/enter.ejs:</p>
<pre><code class="ejs">&lt;!-- 使用 gitcoment --&gt;
&lt;div id=&quot;gitment-comment&quot;&gt;
    &lt;%- partial(&#39;_widget/comment/&#39; + theme.comment.use + &#39;/main&#39;) %&gt;
&lt;/div&gt;
&lt;style&gt;
    #gitment-comment{
        background-color: #eee;
        padding: 2pc;
    }
&lt;/style&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;
&lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    var gitment = new Gitment({
        //id: &#39;页面 ID&#39;, // 可选。默认为 location.href
        id: &#39;&lt;%=  page.title.substr(0,48) %&gt;&#39;, // 加上这一行
        owner: &#39;&lt;%= theme.comment.gitment_owner %&gt;&#39;,
        repo: &#39;&lt;%= theme.comment.gitment_repo %&gt;&#39;,
        oauth: {
            client_id: &#39;&lt;%= theme.comment.gitment_client_id %&gt;&#39;,
            client_secret: &#39;&lt;%= theme.comment.gitment_client_secret %&gt;&#39;,
        },
    })
    gitment.render(&#39;container&#39;)
&lt;/script&gt;
</code></pre>
<p>md5加密方法与我的做法大同小异，具体可参见<a href="https://priesttomb.github.io/日常/2018/02/12/处理Gitalk中由于文章URL过长导致的Validation-Failed%28422%29/" target="_blank" rel="noopener">@<strong>PriestTomb</strong>的文章</a>。</p>
]]></content>
      
        <categories>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 命名空间]]></title>
      <url>/2017/04/04/PHP-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
      <content type="html"><![CDATA[<h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><hr>
<blockquote>
<p>今天被计组的bug折磨了将近一整天，现在有点头昏脑胀。命名空间这节学的乱七八糟的，大多都是copy文档。之后有时间再慢慢消化。（又挖了个坑）清明假期终于要结束了，我还真是什么都没做呢，sad</p>
</blockquote>
<p><strong>命名空间</strong>是在PHP 5.3中加入的，最明确的目的就是解决重名问题。</p>
<h2 id="1-定义命名空间"><a href="#1-定义命名空间" class="headerlink" title="1 定义命名空间"></a>1 定义命名空间</h2><p>命名空间通过namespace声明，声明必须在其他代码前。<br>可以在同一文件中定义不同的命名空间。</p>
<p>命名空间有两种定义方式：</p>
<pre><code class="php">&lt;?php  
namespace MyProject1;  
// MyProject1 命名空间中的PHP代码  

namespace MyProject2;  
// MyProject2 命名空间中的PHP代码    

// 另一种定义方式
namespace MyProject3 
{  
 // MyProject3 命名空间中的PHP代码    
}  
?&gt;
</code></pre>
<p>在声明命名空间之前不能出现任何非PHP代码（包括空白符），唯一合法的代码是用于定义文件编码方式的语句，即<strong>程序脚本</strong>的第一条语句必须是<strong>命名空间声明</strong>或<strong>编码声明</strong>。</p>
<p>例如：</p>
<pre><code class="php">&lt;?php
declare(encoding=&#39;UTF-8&#39;); //定义多个命名空间和不包含在命名空间中的代码
namespace MyProject 
{
    const CONNECT_OK = 1;
    class Connection { /* ... */ }
    function connect() { /* ... */  }
}

namespace 
{ // 全局代码
    session_start();
    $a = MyProject\connect();
    echo MyProject\Connection::start();//类似文件路径的语法： \空间名\元素名
}
?&gt;
</code></pre>
<h2 id="2-命名空间使用"><a href="#2-命名空间使用" class="headerlink" title="2 命名空间使用"></a>2 命名空间使用</h2><p>PHP命名空间中的类名可以通过三种方式引用：</p>
<p>1 <strong>非限定名称，或不包含前缀的类名</strong><br>    例如 $comment = new Comment();。如果当前命名空间是Blog\Article，Comment将被解析为Blog\Article\Comment。如果使用Comment的代码不包含在任何命名空间中的代码（全局空间中），则Comment会被解析为Comment。<br>    NOTE: 若命名空间中的函数或常量未定义，则该名称会被解析为全局名称。</p>
<p>2 <strong>限定名称，或包含前缀的名称</strong><br>    例如 $comment = new Article\Comment();。如果当前的命名空间是Blog，则Comment会被解析为Blog\Article\Comment。如果使用Comment的代码不包含在任何命名空间中的代码（全局空间中），则Comment会被解析为Comment。</p>
<p>3 <strong>完全限定名称，或包含了全局前缀操作符的名称</strong><br>    例如 $comment = new \Article\Comment();。在这种情况下，Comment总是被解析为代码中的文字名(literal name)Article\Comment。</p>
<p>这三者可以类比为文件名，相对路径名和绝对路径名。<br>NOTE: 访问任意全局类，函数或常量都可以使用完全限定名称。<br>例如：</p>
<pre><code class="php">&lt;?php
namespace Foo;

function strlen() {}
const INI_ALL = 3;
class Exception {}

$a = \strlen(&#39;hi&#39;); // 调用全局函数strlen
$b = \INI_ALL; // 访问全局常量 INI_ALL
$c = new \Exception(&#39;error&#39;); // 实例化全局类 Exception
?&gt;
</code></pre>
<h2 id="3-子命名空间"><a href="#3-子命名空间" class="headerlink" title="3 子命名空间"></a>3 子命名空间</h2><p>PHP允许指定层次化的命名空间。<br>子空间也可以定义多层。</p>
<p>例如：</p>
<pre><code class="php">&lt;?php
//我用这样的命名空间表示处于blog下的article模块
namespace Blog\Article;
class Comment { }

//我用这样的命名空间表示处于blog下的message board模块
namespace Blog\MessageBoard;
class Comment { }

//调用当前空间即MessageBoard的类
$comment = new Comment();
//调用Blog\Article空间的类
$article_comment = new \Blog\Article\Comment();
?&gt;
</code></pre>
<h2 id="4-别名和导入"><a href="#4-别名和导入" class="headerlink" title="4 别名和导入"></a>4 别名和导入</h2><p>别名和导入可以看作是调用命名空间元素的一种快捷方式。<br><em>PHP不支持导入函数或常量。</em><br><strong>别名与导入都是通过use操作符实现</strong>,别名：use…as…;导入：use…;（这一点很像SQL，笑）<br>NOTE: 注意导入时两个命名空间不能有相同名字的元素。</p>
<pre><code class="php">&lt;?php
namespace Blog\Article;
class Comment { }

//创建一个BBS空间
namespace BBS;
//导入一个命名空间
use Blog\Article;
//导入命名空间后可使用限定名称调用元素
$article_comment = new Article\Comment();

//为命名空间使用别名
use Blog\Article as Arte;
//使用别名代替空间名
$article_comment = new Arte\Comment();

//导入一个类
use Blog\Article\Comment;
//导入类后可使用非限定名称调用元素
$article_comment = new Comment();
//为类使用别名
use Blog\Article\Comment as Comt;
//使用别名代替空间名
$article_comment = new Comt();
?&gt;
</code></pre>
<h2 id="5-namespace关键字与-NAMESPACE-常量"><a href="#5-namespace关键字与-NAMESPACE-常量" class="headerlink" title="5 namespace关键字与__NAMESPACE__常量"></a>5 namespace关键字与__NAMESPACE__常量</h2><ul>
<li>关键字namespace可以用来显示访问当前命名空间或子命名空间中的元素，等价于类中的self操作符。</li>
<li>常量__NAMESPACE__的值是包含当前命名空间名称的字符串。全局中的不包括在任何命名空间中的代码，该常量为一个空的字符串。 </li>
</ul>
<h2 id="6-命名空间的顺序"><a href="#6-命名空间的顺序" class="headerlink" title="6 命名空间的顺序"></a>6 命名空间的顺序</h2><p>PHP中名称解析遵循以下规则：</p>
<p>1 对<strong>完全限定名称</strong>的函数，类和常量的调用在编译时解析。例如 new \A\B 解析为类 A\B。</p>
<p>2 所有的<strong>非限定名称和限定名称（非完全限定名称）</strong>根据当前的导入规则在编译时进行转换。例如，如果命名空间 A\B\C 被导入为 C，那么对 C\D\e() 的调用就会被转换为 A\B\C\D\e()。 </p>
<p>3 在命名空间内部，所有的<em>没有根据导入规则转换</em>的<strong>限定名称</strong>均会在其前面加上当前的命名空间名称。例如，在命名空间 A\B 内部调用 C\D\e()，则 C\D\e() 会被转换为 A\B\C\D\e() 。</p>
<p>4 <strong>非限定类名称</strong>根据当前的导入规则在编译时转换（用全名代替短的导入名称）。例如，如果命名空间 A\B\C 导入为C，则 new C() 被转换为 new A\B\C() 。 </p>
<p>5 在命名空间内部，对<strong>非限定名称</strong>的函数调用是在运行时解析的。<br>  例如对函数 foo() 的调用是这样解析的：</p>
<ul>
<li><p>在当前命名空间中查找名为 A\B\foo() 的函数</p>
</li>
<li><p>尝试查找并调用 全局(global) 空间中的函数 foo()。</p>
</li>
</ul>
<p>6 在命名空间内部对<strong>非限定名称或限定名称类（非完全限定名称）</strong>的调用是在运行时解析的。</p>
<p>  例如调用new C()时的解析过程：</p>
<ul>
<li>在当前命名空间中查找A\B\C类。 </li>
<li><p>尝试自动加载类A\B\C。</p>
<p>而new D\E()的解析过程：</p>
</li>
<li><p>在类名称前面加上当前命名空间名称变成：A\B\D\E，然后查找该类。 </p>
</li>
<li>尝试自动加载类 A\B\D\E。 </li>
</ul>
<p>以一个例子解释（例子来源：<a href="http://www.golaravel.com/php/language.namespaces.rules.html" target="_blank" rel="noopener">PHP中文手册</a>）:</p>
<pre><code class="php">
&lt;?php
namespace A;
use B\D, C\E as F;

// 函数调用

foo();      // 首先尝试调用定义在命名空间&quot;A&quot;中的函数foo()
            // 再尝试调用全局函数 &quot;foo&quot;

\foo();     // 调用全局空间函数 &quot;foo&quot; 

my\foo();   // 调用定义在命名空间&quot;A\my&quot;中函数 &quot;foo&quot; 

F();        // 首先尝试调用定义在命名空间&quot;A&quot;中的函数 &quot;F&quot; 
            // 再尝试调用全局函数 &quot;F&quot;

// 类引用

new B();    // 创建命名空间 &quot;A&quot; 中定义的类 &quot;B&quot; 的一个对象
            // 如果未找到，则尝试自动装载类 &quot;A\B&quot;

new D();    // 使用导入规则，创建命名空间 &quot;B&quot; 中定义的类 &quot;D&quot; 的一个对象
            // 如果未找到，则尝试自动装载类 &quot;B\D&quot;

new F();    // 使用导入规则，创建命名空间 &quot;C&quot; 中定义的类 &quot;E&quot; 的一个对象
            // 如果未找到，则尝试自动装载类 &quot;C\E&quot;

new \B();   // 创建定义在全局空间中的类 &quot;B&quot; 的一个对象
            // 如果未发现，则尝试自动装载类 &quot;B&quot;

new \D();   // 创建定义在全局空间中的类 &quot;D&quot; 的一个对象
            // 如果未发现，则尝试自动装载类 &quot;D&quot;

new \F();   // 创建定义在全局空间中的类 &quot;F&quot; 的一个对象
            // 如果未发现，则尝试自动装载类 &quot;F&quot;

// 调用另一个命名空间中的静态方法或命名空间函数

B\foo();    // 调用命名空间 &quot;A\B&quot; 中函数 &quot;foo&quot;

B::foo();   // 调用命名空间 &quot;A&quot; 中定义的类 &quot;B&quot; 的 &quot;foo&quot; 方法
            // 如果未找到类 &quot;A\B&quot; ，则尝试自动装载类 &quot;A\B&quot;

D::foo();   // 使用导入规则，调用命名空间 &quot;B&quot; 中定义的类 &quot;D&quot; 的 &quot;foo&quot; 方法
            // 如果类 &quot;B\D&quot; 未找到，则尝试自动装载类 &quot;B\D&quot;

\B\foo();   // 调用命名空间 &quot;B&quot; 中的函数 &quot;foo&quot; 

\B::foo();  // 调用全局空间中的类 &quot;B&quot; 的 &quot;foo&quot; 方法
            // 如果类 &quot;B&quot; 未找到，则尝试自动装载类 &quot;B&quot;

// 当前命名空间中的静态方法或函数

A\B::foo();   // 调用命名空间 &quot;A\A&quot; 中定义的类 &quot;B&quot; 的 &quot;foo&quot; 方法
              // 如果类 &quot;A\A\B&quot; 未找到，则尝试自动装载类 &quot;A\A\B&quot;

\A\B::foo();  // 调用命名空间 &quot;A\B&quot; 中定义的类 &quot;B&quot; 的 &quot;foo&quot; 方法
              // 如果类 &quot;A\B&quot; 未找到，则尝试自动装载类 &quot;A\B&quot;
?&gt;
</code></pre>
<p>滚去睡觉了，goodnight。</p>
<hr>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Introduction of IU - First Edition]]></title>
      <url>/2017/04/02/Introduction-of-IU-First-Edition/</url>
      <content type="html"><![CDATA[<h1 id="HTML学习-Introduction-of-IU-1st-Edition"><a href="#HTML学习-Introduction-of-IU-1st-Edition" class="headerlink" title="HTML学习 - Introduction of IU(1st Edition)"></a>HTML学习 - Introduction of IU(1st Edition)</h1><hr>
<p>这两天在<a href="http://www.freecodecamp.cn/" target="_blank" rel="noopener">FreeCodeCamp</a>上学习前端（顺便推荐一下这个网站），第一个project是写一个<a href="http://www.freecodecamp.cn/challenges/build-a-tribute-page" target="_blank" rel="noopener">Tribute page</a>。刚好最近沉迷于女神IU的美色无法自拔，就用纯html为IU写了个Introduction Page，数据来源<a href="https://en.wikipedia.org/wiki/IU(singer)" target="_blank" rel="noopener">Wiki Pedia</a>。</p>
<p>第一版为了在FreeCodeCamp上提交project，写得很粗略，布局配色什么的也都没考虑。先贴地址: <a href="https://kathyflores.github.io/FreeCodeCamp/Build_a_Tribute_Page/IU_page.html" target="_blank" rel="noopener">IU_page</a>.</p>
<p>主要利用了bootstrap框架，最近学的东西有点多，来不及写bootstrap的笔记了，之后补上。</p>
<p>最后附上源码：</p>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
      &lt;meta charset=&quot;utf-8&quot;&gt;
            &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/bootstrap/3.3.1/css/bootstrap.min.css&quot;/&gt;
            &lt;!-- bootstrap --&gt;
            &lt;style&gt;
                body {
                  margin-top: 60px;
                  background-color: #F5F5F5;
                }
            &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
            &lt;div class=&quot;container&quot;&gt;
              &lt;div class=&quot;row clearfix&quot;&gt;
                &lt;div class=&quot;col-xs-12 column&quot;&gt;
                  &lt;div class=&quot;jumbotron&quot;&gt;
                    &lt;h1 class=&quot;text-primary&quot;&gt;Lee Ji-eun&lt;/h1&gt;
                    &lt;p&gt;&lt;strong&gt;Lee Ji-eun&lt;/strong&gt; (Korean: &lt;span&gt;이지은&lt;/span&gt;; born May 16, 1993), better known by her stage name &lt;span class=&quot;text-primary&quot;&gt;&lt;strong&gt;IU&lt;/strong&gt;&lt;/span&gt; (Korean: &lt;span&gt;아이유&lt;/span&gt;), is a South Korean singer, songwriter and actress.&lt;/p&gt;
                    &lt;img class=&quot;img-rounded img-responsive center-block&quot; src=&quot;https://kathyflores.github.io/img/pic1.jpg&quot;&gt;
                    &lt;p&gt;
                      &lt;/br&gt;
                      &lt;a class=&quot;btn btn-primary btn-large&quot; href=&quot;https://en.wikipedia.org/wiki/IU_(singer)&quot; target=&quot;_blank&quot;&gt;Learn more&lt;/a&gt;
                    &lt;/p&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
              &lt;div class=&quot;row clearfix&quot;&gt;
                &lt;div class=&quot;col-xs-6 column&quot;&gt;
                  &lt;h2 class=&quot;text-center text-info&quot;&gt;&lt;strong&gt;Career&lt;/strong&gt;&lt;/h2&gt;
                  &lt;ul&gt;
                    &lt;li&gt;&lt;strong&gt;2008–2009&lt;/strong&gt;: Career beginnings&lt;/li&gt;
                    &lt;li&gt;&lt;strong&gt;2010–2011&lt;/strong&gt;: Rising popularity and acting debut&lt;/li&gt;
                    &lt;li&gt;&lt;strong&gt;2012&lt;/strong&gt;: Japanese debut and first solo concert tour&lt;/li&gt;
                    &lt;li&gt;&lt;strong&gt;2013&lt;/strong&gt;: First starring roles and Modern Times&lt;/li&gt;
                    &lt;li&gt;&lt;strong&gt;2014&lt;/strong&gt;: A Flower Bookmark&lt;/li&gt;
                    &lt;li&gt;&lt;strong&gt;2015–2016&lt;/strong&gt;: The Producers, Infinite Challenge, Chat-Shire, and Moon Lovers: Scarlet Heart Ryeo&lt;/li&gt;
                    &lt;li&gt;&lt;strong&gt;2017–present&lt;/strong&gt;: fourth studio album&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
                &lt;div class=&quot;col-xs-6 column&quot;&gt;
                  &lt;h2 class=&quot;text-center text-info&quot;&gt;&lt;strong&gt;Film&lt;/strong&gt;&lt;/h2&gt;
                  &lt;/br&gt;
                  &lt;table class=&quot;table table-hover table-condensed&quot;&gt;
                    &lt;thead&gt;
                      &lt;tr&gt;
                        &lt;th&gt;Year&lt;/th&gt;
                        &lt;th&gt;Title&lt;/th&gt;
                        &lt;th&gt;Role&lt;/th&gt;
                        &lt;th&gt;Notes&lt;/th&gt;
                      &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                      &lt;tr&gt;
                        &lt;td&gt;2012&lt;/td&gt;
                        &lt;td&gt;A Turtle&#39;s Tale 2: Sammy&#39;s Escape from Paradise&lt;/td&gt;
                        &lt;td&gt;Ella&lt;/td&gt;
                        &lt;td&gt;Korean dub&lt;/td&gt;
                      &lt;/tr&gt;
                      &lt;tr&gt;
                        &lt;td&gt;2017&lt;/td&gt;
                        &lt;td&gt;Real&lt;/td&gt;
                        &lt;td&gt;&lt;/td&gt;
                        &lt;td&gt;Cameo&lt;/td&gt;
                      &lt;/tr&gt;
                    &lt;/tbody&gt;
                  &lt;/table&gt;
                &lt;/div&gt;
              &lt;/div&gt;
              &lt;/br&gt;
              &lt;div class=&quot;row clearfix&quot;&gt;
                &lt;div class=&quot;col-xs-12 column&quot;&gt;
                  &lt;h2 class=&quot;text-center text-info&quot;&gt;&lt;strong&gt;Television drama&lt;/strong&gt;&lt;/h2&gt;
                  &lt;table class=&quot;table table-condensed table-hover&quot;&gt;
                    &lt;thead&gt;
                      &lt;tr&gt;
                        &lt;th&gt;Year&lt;/th&gt;
                        &lt;th&gt;Title&lt;/th&gt;
                        &lt;th&gt;Role&lt;/th&gt;
                        &lt;th&gt;Notes&lt;/th&gt;
                      &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                      &lt;tr&gt;
                        &lt;td&gt;2011&lt;/td&gt;
                        &lt;td&gt;Dream High&lt;/td&gt;
                        &lt;td&gt;Kim Pil-suk&lt;/td&gt;
                        &lt;td&gt;Main cast:
                          &lt;ul&gt;
                            &lt;li&gt;Nominated – KBS Drama Award for Best New Actress&lt;/li&gt;
                            &lt;li&gt;Nominated – KBS Drama Award for Best Couple with Jang Wooyoung&lt;/li&gt;
                            &lt;li&gt;Nominated – Baeksang Arts Award for Most Popular Actress (TV)&lt;/li&gt;
                            &lt;li&gt;Nominated – Mnet Asian Music&lt;/li&gt;
                            &lt;li&gt;Award for Best O.S.T. for Someday&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/td&gt;
                      &lt;/tr&gt;
                      &lt;tr&gt;
                        &lt;td&gt;2011&lt;/td&gt;
                        &lt;td&gt;Welcome to the Show&lt;/td&gt;
                        &lt;td&gt;Herself&lt;/td&gt;
                        &lt;td&gt;Episode 1&lt;/td&gt;
                      &lt;/tr&gt;
                      &lt;tr&gt;
                        &lt;td&gt;2012&lt;/td&gt;
                        &lt;td&gt;Dream High 2&lt;/td&gt;
                        &lt;td&gt;Kim Pil-suk&lt;/td&gt;
                        &lt;td&gt;Episode 1 (cameo)&lt;/td&gt;
                      &lt;/tr&gt;
                      &lt;tr&gt;
                        &lt;td&gt;2012&lt;/td&gt;
                        &lt;td&gt;Salamander Guru and The Shadows&lt;/td&gt;
                        &lt;td&gt;Pickpocket Jieun&lt;/td&gt;
                        &lt;td&gt;Episode 6 (cameo)&lt;/td&gt;
                      &lt;/tr&gt;
                      &lt;tr&gt;
                        &lt;td&gt;2013&lt;/td&gt;
                        &lt;td&gt;You&#39;re the Best, Lee Soon-shin&lt;/td&gt;
                        &lt;td&gt;Lee Soon-shin&lt;/td&gt;
                        &lt;td&gt;Lead role:
                          &lt;ul&gt;
                            &lt;li&gt;Won – KBS Drama Award for Best New Actress (also for Bel Ami)&lt;/li&gt;
                            &lt;li&gt;Won – KBS Drama Award for Best Couple with Jo Jung-suk&lt;/li&gt;
                            &lt;li&gt;Nominated – KBS Drama Awards&#39; Excellence Award for Actress in a Serial Drama&lt;/li&gt;
                            &lt;li&gt;Nominated – Baeksang Arts Award for Most Popular Actress (TV)&lt;/li&gt;
                          &lt;/ul&gt;
                        &lt;/td&gt;
                                &lt;/tr&gt;
                                &lt;tr&gt;
                                    &lt;td&gt;2013&lt;/td&gt;
                                    &lt;td&gt;Bel Ami&lt;/td&gt;
                                    &lt;td&gt;Kim Bo-tong&lt;/td&gt;
                                    &lt;td&gt;Lead role:
                                        &lt;ul&gt;
                                            &lt;li&gt;Won – KBS Drama Award for Best New Actress (also for You&#39;re the Best, Lee Soon-shin)&lt;/li&gt;
                                            &lt;li&gt;Nominated – KBS Drama Award for Best Couple with Jang Keun-suk&lt;/li&gt;
                                            &lt;li&gt;Nominated – Seoul International Drama Award for Outstanding Korean Actress&lt;/li&gt;
                                            &lt;li&gt;Nominated – Seoul International Youth Film Festival for Best Young Actress&lt;/li&gt;
                                        &lt;/ul&gt;
                                    &lt;/td&gt;
                                &lt;/tr&gt;
                                &lt;tr&gt;
                                    &lt;td&gt;2015&lt;/td&gt;
                                    &lt;td&gt;The Producers&lt;/td&gt;
                                    &lt;td&gt;Cindy&lt;/td&gt;
                                    &lt;td&gt;Lead role:
                                        &lt;ul&gt;
                                            &lt;li&gt;Nominated – KBS Drama Awards&#39; Popularity Award for Actress&lt;/li&gt;
                                            &lt;li&gt;Nominated – KBS Drama Award for Best Couple with Kim Soo-hyun&lt;/li&gt;
                                            &lt;li&gt;Nominated – Korea Drama Awards&#39; Excellence Award for Actress&lt;/li&gt;
                                            &lt;li&gt;Nominated – APAN Star Awards&#39; Excellence Award for Actress in a Miniseries&lt;/li&gt;
                                        &lt;/ul&gt;
                                    &lt;/td&gt;
                                &lt;/tr&gt;
                                &lt;tr&gt;
                                    &lt;td&gt;2016&lt;/td&gt;
                                    &lt;td&gt;Moon Lovers: Scarlet Heart Ryeo&lt;/td&gt;
                                    &lt;td&gt;Go Ha-jin/Hae-soo&lt;/td&gt;
                                    &lt;td&gt;Lead role:
                                        &lt;ul&gt;
                                            &lt;li&gt;Won – SBS Drama Awards Best Couple Award with Lee Joon-gi&lt;/li&gt;
                                            &lt;li&gt;Won – SBS Drama Awards Idol Academy Award, Heart-wrenching Award&lt;/li&gt;
                                            &lt;li&gt;Nominated – SBS Drama Awards K-Wave (Hallyu) Star Award&lt;/li&gt;
                                        &lt;/ul&gt;
                                    &lt;/td&gt;
                                &lt;/tr&gt;
                    &lt;/tbody&gt;
                  &lt;/table&gt;
                &lt;/div&gt;
              &lt;/div&gt;
              &lt;footer class=&quot;text-center&quot;&gt;
                  &lt;hr&gt;
                  &lt;p&gt;© Coded by &lt;a href=&quot;https://github.com/KathyFlores&quot; target=&quot;_blank&quot;&gt;KathyFlores&lt;/p&gt;
              &lt;/footer&gt;
            &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>最后的最后，再推荐一个可以在线编辑HTML、CSS、JS的网站，个人觉得还不错：<a href="https://codepen.io/" target="_blank" rel="noopener">https://codepen.io/</a></p>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP魔术变量]]></title>
      <url>/2017/04/01/PHP-%E9%AD%94%E6%9C%AF%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<h1 id="魔术变量"><a href="#魔术变量" class="headerlink" title="魔术变量"></a>魔术变量</h1><hr>
<p>PHP在设计的时候已经预定义了9个超级全局变量、8个魔术变量和13魔术函数，这些变量与函数可以在脚本的任何地方使用（不用预先声明）。魔术变量不区分大小写。</p>
<h2 id="1-LINE"><a href="#1-LINE" class="headerlink" title="1 __LINE__"></a>1 <strong>__LINE__</strong></h2><p>文件中的 <em>当前行号</em> 。<br>EXAMPLE:</p>
<pre><code class="php">&lt;?php
echo &#39;这是第 &quot; &#39;  . __LINE__ . &#39; &quot; 行&#39;;
?&gt;
</code></pre>
<p><strong>OUTPUT</strong>: 这是第 “ 2 “ 行</p>
<h2 id="2-FILE"><a href="#2-FILE" class="headerlink" title="2 __FILE__"></a>2 <strong>__FILE__</strong></h2><p>文件的 <em>完整路径</em> 和 <em>文件名</em> 。<br>若用在被包含文件中，则返回被包含的文件名。<br>NOTE: 超全局变量$_SERVER[‘PHP_SELF’]只返回文件名，而无绝对路径。<br>EXAMPLE:</p>
<pre><code class="php">&lt;?php
echo &#39;该文件位于 &quot; &#39;  . __FILE__ . &#39; &quot; &#39;;
?&gt;
</code></pre>
<p><strong>OUTPUT</strong>: 该文件位于 “ D:\php-7.1.3-src\Apache24\htdocs\getuser.php “ </p>
<h2 id="3-DIR"><a href="#3-DIR" class="headerlink" title="3 __DIR__"></a>3 <strong>__DIR__</strong></h2><p>文件 <em>所在的目录</em> 。<br>若用在被包括文件中，则返回被包括的文件所在的目录。<br>等价于dirname(__FILE__)。<br>NOTE：不包括末尾的斜杠，除非是根目录。<br>EXAMPLE:</p>
<pre><code class="php">&lt;?php
echo &#39;该文件位于 &quot; &#39;  . __DIR__ . &#39; &quot; &#39;;
?&gt;
</code></pre>
<p><strong>OUTPUT</strong>: 该文件位于 “ D:\php-7.1.3-src\Apache24\htdocs “</p>
<h2 id="4-FUNCTION"><a href="#4-FUNCTION" class="headerlink" title="4 __FUNCTION__"></a>4 <strong>__FUNCTION__</strong></h2><p><em>函数名称</em> （区分大小写）。<br>EXAMPLE:</p>
<pre><code class="php">&lt;?php
function test() 
{
    echo  &#39;函数名为：&#39; . __FUNCTION__ ;
}
test();
?&gt;
</code></pre>
<p><strong>OUTPUT</strong>: 函数名为：test </p>
<h2 id="5-CLASS"><a href="#5-CLASS" class="headerlink" title="5 __CLASS__"></a>5 <strong>__CLASS__</strong></h2><p><em>类的名称</em> （区分大小写）。<br>NOTE:</p>
<ul>
<li>类名包括其被声明的作用区域。</li>
<li>对trait也起作用，在trait方法中使用，返回调用trait的类的名字。</li>
</ul>
<p>EXAMPLE:</p>
<pre><code class="php">&lt;?php
class test 
{
    function _print() 
    {
        echo &#39;类名为：&#39;  . __CLASS__ . &quot;&lt;br&gt;&quot;;
    }
}
$t = new test();
$t-&gt;_print();
?&gt;
</code></pre>
<p><strong>OUTPUT</strong>: 类名为：test</p>
<h2 id="6-TRAIT"><a href="#6-TRAIT" class="headerlink" title="6 __TRAIT__"></a>6 <strong>__TRAIT__</strong></h2><p><em>Trait的名字</em> 。<br>NOTE: trait名字包括其被声明的作用区域。<br>EXAMPLE:</p>
<pre><code class="php">&lt;?php
class Base 
{
    public function sayHello() 
    {
        echo &#39;Hello &#39;;
    }
}
trait SayWorld {
    public function sayHello() 
    {
        parent::sayHello();
        echo &#39;World!&#39;.__TRAIT__;
    }
}
class MyHelloWorld extends Base 
{
    use SayWorld;
}
$o = new MyHelloWorld();
$o-&gt;sayHello();
?&gt;
</code></pre>
<p><strong>OUTPUT</strong>: Hello World!SayWorld </p>
<h2 id="7-METHOD"><a href="#7-METHOD" class="headerlink" title="7 __METHOD__"></a>7 <strong>__METHOD__</strong></h2><p><em>方法名</em> ，与__FUNCTION__类似。</p>
<h2 id="8-NAMESPACE"><a href="#8-NAMESPACE" class="headerlink" title="8 __NAMESPACE__"></a>8 <strong>__NAMESPACE__</strong></h2><p><em>当前命名空间的名称</em> ，在编译时定义。<br>EXAMPLE:</p>
<pre><code class="php">&lt;?php
namespace MyProject;
echo &#39;命名空间为：&quot;&#39;, __NAMESPACE__, &#39;&quot;&#39;;
?&gt;
</code></pre>
<p><strong>OUTPUT</strong>: 命名空间为：MyProject</p>
<hr>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
  
  
    
  
</search>
