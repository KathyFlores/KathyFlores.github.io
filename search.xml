<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[深入理解Android学习笔记2019/1/2]]></title>
      <url>/2019/01/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02019-1-2/</url>
      <content type="html"><![CDATA[<p>接着昨天没看完的部分看：</p>
<h2 id="3-2-JNI"><a href="#3-2-JNI" class="headerlink" title="3.2 JNI"></a>3.2 JNI</h2><h3 id="3-2-1-JNI函数注册"><a href="#3-2-1-JNI函数注册" class="headerlink" title="3.2.1 JNI函数注册"></a>3.2.1 JNI函数注册</h3><p>​    昨天说到JNI层函数需要注册，JNI函数的注册方式有两种：</p>
<ul>
<li>静态注册<br>根据<strong>函数名</strong>寻找对应的JNI函数，需要javah（java的工具程序）参与。<br>具体方法：使用javah生成java代码对应的JNI层头文件，头文件里声明了对应的JNI层函数，实现这个函数即可。</li>
</ul>
<p>eg. [android_media_MediaScanner.h]</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machinegenerated */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;  //必须包含这个头文件，否则编译通不过</span></span></span><br><span class="line"><span class="comment">/* Header for class android_media_MediaScanner*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_android_media_MediaScanner</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_android_media_MediaScanner</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">......</span><br><span class="line"><span class="comment">//略去一部分注释内容</span></span><br><span class="line"><span class="comment">//processFile的JNI函数</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_android_media_MediaScanner_processFile</span><br><span class="line">                   (JNIEnv *, jobject, jstring,jstring, jobject);</span><br><span class="line">......</span><br><span class="line"><span class="comment">//略去一部分注释内容</span></span><br><span class="line"><span class="comment">//native_init对应的JNI函数</span></span><br><span class="line"></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_android_media_MediaScanner_native_1init</span><br><span class="line">  (JNIEnv*, jclass);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>​    <strong>当Java层调用native_init函数时，它会从对应的JNI库Java_android_media_MediaScanner_native_linit，如果没有，就会报错。如果找到，则会为这个native_init和Java_android_media_MediaScanner_native_linit建立一个关联关系，其实就是保存JNI层函数的函数指针。以后再调用native_init函数时，直接使用这个函数指针就可以了，当然这项工作是由虚拟机完成的。</strong></p>
<p>​<br>    静态注册的缺点：<br>    · 需要编译所有声明了native函数的Java类，每个生成的class文件都得用javah生成一个头文件。<br>    · javah生成的JNI层函数名特别长，书写起来很不方便。<br>    · 初次调用native函数时要根据函数名字搜索对应的JNI层函数来建立关联关系，这样会影响运行效率。</p>
<ul>
<li>动态注册<br>用<strong>结构</strong>来记录native函数和JNI函数的对应关系，这个结构叫<strong>JNINativeMethod</strong>。</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">//Java中native函数的名字，不用携带包的路径。例如“native_init“。</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* name;    </span><br><span class="line">    <span class="comment">//Java函数的签名信息，用字符串表示，是参数类型和返回值类型的组合。</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* signature;</span><br><span class="line">    <span class="comment">//JNI层对应函数的函数指针，注意它是void*类型。</span></span><br><span class="line">    <span class="keyword">void</span>*       fnPtr;  </span><br><span class="line">&#125; JNINativeMethod;</span><br></pre></td></tr></table></figure>
<p>eg. [android_media_MediaScanner.cpp]<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个JNINativeMethod数组，其成员就是MS中所有native函数的一一对应关系。</span></span><br><span class="line"><span class="keyword">static</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">    ......</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"processFile"</span>, <span class="comment">//Java中native函数的函数名。</span></span><br><span class="line">        <span class="comment">//processFile的签名信息，签名信息的知识，后面再做介绍。</span></span><br><span class="line">        <span class="string">"(Ljava/lang/String;Ljava/lang/String;Landroid/media/MediaScannerClient;)V"</span>,</span><br><span class="line">        (<span class="keyword">void</span>*)android_media_MediaScanner_processFile <span class="comment">//JNI层对应函数指针。</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"native_init"</span>,     </span><br><span class="line">        <span class="string">"()V"</span>,                </span><br><span class="line">        (<span class="keyword">void</span> *)android_media_MediaScanner_native_init</span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册JNINativeMethod数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">register_android_media_MediaScanner</span><span class="params">(JNIEnv* env)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//调用AndroidRuntime的registerNativeMethods函数，第二个参数表明是Java中的哪个类</span></span><br><span class="line">    returnAndroidRuntime::registerNativeMethods(env,</span><br><span class="line">        <span class="string">"android/media/MediaScanner"</span>, gMethods, NELEM(gMethods));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>​    上述代码中有一个函数：registerNativeMethods，这一函数由AndroidRunTime类提供，作用是完成注册工作。实现如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[AndroidRunTime.cpp]</span></span><br><span class="line"><span class="keyword">int</span> AndroidRuntime::registerNativeMethods(JNIEnv*env,</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* className, <span class="keyword">const</span> JNINativeMethod* gMethods, <span class="keyword">int</span> numMethods)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//调用jniRegisterNativeMethods函数完成注册</span></span><br><span class="line">    <span class="keyword">return</span> jniRegisterNativeMethods(env, className, gMethods, numMethods);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    其中jniRegisterNativeMethods是Android平台中，为了方便JNI使用而提供的一个帮助函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[JNIHelp.c]</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">jniRegisterNativeMethods</span><span class="params">(JNIEnv* env, <span class="keyword">const</span> <span class="keyword">char</span>* className,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">const</span> JNINativeMethod* gMethods, <span class="keyword">int</span> numMethods)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    jclass clazz;</span><br><span class="line">    clazz = (*env)-&gt;FindClass(env, className); <span class="comment">// 找到函数所在类</span></span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实际上是调用JNIEnv的RegisterNatives函数完成注册的</span></span><br><span class="line">    <span class="keyword">if</span>((*env)-&gt;RegisterNatives(env, clazz, gMethods, numMethods) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​  当Java层通过System.loadLibrary加载完<strong>JNI动态库</strong>后，紧接着会查找该库中一个叫<strong>JNI_OnLoad</strong>的函数，如果有，就调用它，而动态注册的工作就是在这里完成的。所以必须实现JNI_OnLoad函数。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[android_media_MediaPlayer.cpp]</span><br><span class="line"><span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//该函数的第一个参数类型为JavaVM,这可是虚拟机在JNI层的代表喔，每个Java进程只有一个这样的JavaVM</span></span><br><span class="line">    JNIEnv* env = <span class="literal">NULL</span>;</span><br><span class="line">    jint result = <span class="number">-1</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span>(vm-&gt;GetEnv((<span class="keyword">void</span>**) &amp;env, JNI_VERSION_1_4) != JNI_OK) &#123;</span><br><span class="line"></span><br><span class="line">        gotobail;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...... </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//动态注册MediaScanner的JNI函数。</span></span><br><span class="line">    <span class="keyword">if</span>(register_android_media_MediaScanner(env) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_4;<span class="comment">//必须返回这个值，否则会报错。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    JNI层代码中一般要包含jni.h这个头文件。Android源码中提供了一个帮助头文件JNIHelp.h，它内部包含了jni.h，所以我们在自己的代码中直接包含JNIHelp.h即可。</p>
<h3 id="3-2-2-数据类型转换"><a href="#3-2-2-数据类型转换" class="headerlink" title="3.2.2 数据类型转换"></a>3.2.2 数据类型转换</h3><p>​    Java的数据类型到了JNI层会做转换，根据java数据类型的分类区别对待：</p>
<ul>
<li>基本类型（❓疑问：字长应该不一定吧，要看系统位数？）</li>
</ul>
<table>
<thead>
<tr>
<th>java类型</th>
<th>native类型</th>
<th>符号属性</th>
<th>字长</th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean</td>
<td>jboolean</td>
<td>❌无符号</td>
<td>8位</td>
</tr>
<tr>
<td>byte</td>
<td>jbyte</td>
<td>❌无符号</td>
<td>8位</td>
</tr>
<tr>
<td>char</td>
<td>jchar</td>
<td>❌无符号</td>
<td>16位</td>
</tr>
<tr>
<td>short</td>
<td>jshort</td>
<td>✅有符号</td>
<td>16位</td>
</tr>
<tr>
<td>int</td>
<td>jint</td>
<td>✅有符号</td>
<td>32位</td>
</tr>
<tr>
<td>long</td>
<td>jlong</td>
<td>✅有符号</td>
<td>64位</td>
</tr>
<tr>
<td>float</td>
<td>jfloat</td>
<td>✅有符号</td>
<td>32位</td>
</tr>
<tr>
<td>double</td>
<td>jdouble</td>
<td>✅有符号</td>
<td>64位</td>
</tr>
</tbody>
</table>
<p>​    ⚠️ jchar占16位！普通char占8位！</p>
<ul>
<li>引用数据类型<br><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fyst8bsa3bj31mu0kkq99.jpg" alt="引用数据类型转换关系"></li>
</ul>
<p>除了Java中基本数据类型的数组、Class、String和Throwable外，其余所有Java对象的数据类型在JNI中都用jobject表示。</p>
<hr>
<p>今天没怎么学习，先这样吧，明天开始看JNIEnv相关的内容。</p>
]]></content>
      
        <categories>
            
            <category> android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解Android学习笔记2019/1/1]]></title>
      <url>/2019/01/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02019-1-1/</url>
      <content type="html"><![CDATA[<h1 id="1-安卓系统架构"><a href="#1-安卓系统架构" class="headerlink" title="1. 安卓系统架构"></a>1. 安卓系统架构</h1><p>下图为安卓的系统架构，可以看出安卓系统分为四层，从下至上分别为：</p>
<ul>
<li><strong>linux内核层</strong> 我们都知道，安卓是基于linux内核实现的。那么这一层即为内核层，除了内核代码外还包含各种驱动模块。</li>
<li><strong>Libraries层</strong> 分为两部分，分别是C/C++程序库和Android运行时库（5.0以后Dalvik被ART取代）。</li>
<li><strong>Framework层</strong> 包括各种manager和View System、Content Providers等，为开发人员提供了开发应用程序所需要的API，平常开发应用程序调用的都是这一层所提供的API，当然也包括系统的应用。这一层的是由Java代码编写的。</li>
<li><strong>Application层</strong> 用Java开发，与用户直接交互的应用程序。<br><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fyr7ejoae2j30wy0u0qv5.jpg" alt="安卓系统架构-1"><br><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fyrm2zry5xj30u01867c4.jpg" alt="安卓系统架构-2"></li>
</ul>
<p>下图是Java和Native层交互示意图，Java通过JNI层调用Linux OS中的系统调用来完成对应的功能。JNI层通过IPC（进程间通信）方式与Native层交互。<br>（JNI：Java Native Interface的缩写，它提供了若干的API实现了Java和其他语言的通信（主要是C&amp;C++））<br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fyrm1qc8k0j30is0bsjs3.jpg" alt="Java和Native层交互示意"></p>
<hr>
<h1 id="2-搭建开发环境"><a href="#2-搭建开发环境" class="headerlink" title="2. 搭建开发环境"></a>2. 搭建开发环境</h1><p>书中推荐安装ubuntu 10.04，我这里装的是16.04。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core curl</span><br><span class="line">sudo mkdir -p /develop/download-froyo</span><br><span class="line">cd /develop/download-froyo</span><br><span class="line">curl http://android.git.kernel.org/repo &gt; ./repo</span><br></pre></td></tr></table></figure></p>
<p>搭建到一半去安卓官网看了下，可能16.04不行，就先搁置了。改天问下学长版本。。</p>
<p>今天先把源码下下来吧<br>参照官网教程：<a href="https://source.android.com/setup/build/downloading#getting-the-files" target="_blank" rel="noopener">https://source.android.com/setup/build/downloading#getting-the-files</a></p>
<h2 id="2-1-安装repo"><a href="#2-1-安装repo" class="headerlink" title="2.1 安装repo"></a>2.1 安装repo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/bin</span><br><span class="line">PATH=~/bin:$PATH</span><br><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span><br><span class="line">chmod a+x ~/bin/repo</span><br></pre></td></tr></table></figure>
<h2 id="2-2-初始化-Repo"><a href="#2-2-初始化-Repo" class="headerlink" title="2.2 初始化 Repo"></a>2.2 初始化 Repo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Documents</span><br><span class="line">mkdir android-src</span><br><span class="line">cd android-src</span><br><span class="line">repo init -u https://android.googlesource.com/platform/manifest</span><br></pre></td></tr></table></figure>
<p>这里报了错：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fatal: Cannot get https://gerrit.googlesource.com/git-repo/clone.bundle</span><br><span class="line">fatal: error [Errno 60] Operation timed out</span><br></pre></td></tr></table></figure></p>
<p>然后尝试了<a href="https://www.cnblogs.com/aaronLinux/p/5862235.html" target="_blank" rel="noopener">https://www.cnblogs.com/aaronLinux/p/5862235.html</a>和<a href="https://blog.csdn.net/jianguo_liao19840726/article/details/9774357" target="_blank" rel="noopener">https://blog.csdn.net/jianguo_liao19840726/article/details/9774357</a>里说的方法，报错变成了：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access 'https://gerrit.googlesource.com/git-repo/': Failed to connect to gerrit.googlesource.com port 443: 连接超时</span><br></pre></td></tr></table></figure></p>
<p>感觉是代理问题，切进./.repo/repo目录，修改proxy：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy "localhost:1087" # 我的ss的http监听端口为1087</span><br></pre></td></tr></table></figure></p>
<p>再次尝试init<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repo init -u https://android.googlesource.com/platform/manifest -b android-7.0.0_r35</span><br><span class="line"><span class="meta">#</span><span class="bash"> repo init --config-name <span class="comment"># 设置邮箱为为gmail邮箱地址，可选</span></span></span><br><span class="line">repo sync</span><br></pre></td></tr></table></figure></p>
<p>init过程太慢，并且中间夹杂着curl: (7) Failed to connect to android.googlesource.com port 443: opertaion timeout的报错，参考<a href="https://blog.csdn.net/lishuiyuntian/article/details/71524175" target="_blank" rel="noopener">https://blog.csdn.net/lishuiyuntian/article/details/71524175</a>的解决方法，设置REPO_URL<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export REPO_URL='https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/'</span><br></pre></td></tr></table></figure></p>
<p>然后开了全局代理，还是有443的提示。最后参考<a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="noopener">清华的help文档</a>，无视了curl: (22) The requested URL returned error: 404 Not Found Server does not provide clone.bundle; ignoring.的报错。</p>
<p>最后<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo sync -c -j8 #多开几个线程 快一点</span><br></pre></td></tr></table></figure></p>
<hr>
<h1 id="3-JNI"><a href="#3-JNI" class="headerlink" title="3. JNI"></a>3. JNI</h1><p><strong>JNI</strong>：Java Native Interface的缩写，Java本地调用。主要实现了Java和Native（C/C++）之间的互相调用。</p>
<p>JNI层必须实现为动态库的样式，便于java虚拟机加载并调用。</p>
<h2 id="3-1-JAVA层："><a href="#3-1-JAVA层：" class="headerlink" title="3.1 JAVA层："></a>3.1 JAVA层：</h2><ul>
<li><strong>加载库要在调用native函数之前，一般做法是在static块语句中加载。</strong></li>
<li><strong>需要由JNI层实现的函数声明需由关键字native修饰。</strong></li>
</ul>
<p>例如MediaSanner.java：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediaScanner</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123; <span class="comment">//static语句</span></span><br><span class="line">        <span class="comment">// ①加载对应的JNI库，media_jni是JNI库的名字。实际加载动态库的时候会拓展成</span></span><br><span class="line">        <span class="comment">// libmedia_jni.so，在Windows平台上将拓展为media_jni.dll。</span></span><br><span class="line"></span><br><span class="line">       System.loadLibrary(<span class="string">"media_jni"</span>);</span><br><span class="line">       native_init();<span class="comment">//调用native_init函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    .......</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//非native函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scanDirectories</span><span class="params">(String[] directories, String volumeName)</span></span>&#123;</span><br><span class="line">          ......</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ②声明一个native函数。native为Java的关键字，表示它将由JNI层完成。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">native_init</span><span class="params">()</span></span>;</span><br><span class="line">    ......</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">processFile</span><span class="params">(String path, String mimeType, MediaScannerClient client)</span></span>;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-2-JNI层"><a href="#3-2-JNI层" class="headerlink" title="3.2 JNI层"></a>3.2 JNI层</h2><p>JNI层需要注册JNI层的函数，即将JNI层的函数与JAVA中的native函数关联起来，这样的话调用到Java中的native函数时就可以找到对应JNI层的函数了。<br>至于注册的方法，明天再看。</p>
]]></content>
      
        <categories>
            
            <category> android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2019秋招阿里前端一面回忆]]></title>
      <url>/2018/08/07/2019%E7%A7%8B%E6%8B%9B%E9%98%BF%E9%87%8C%E5%89%8D%E7%AB%AF%E4%B8%80%E9%9D%A2%E5%9B%9E%E5%BF%86/</url>
      <content type="html"><![CDATA[<ol>
<li>函数闭包的作用</li>
<li>正则，头尾空格匹配</li>
<li>call、apply、bind区别</li>
<li>跨域</li>
<li>jsonp中callback的作用</li>
<li>jsonp中返回数据的格式</li>
<li>margin重叠</li>
<li>reflow和repaint</li>
<li>bfc了解吗</li>
<li>框架用过吗</li>
<li>react setState三次会render几次</li>
<li>react key起什么作用</li>
<li>react shouldComponentUpdate使用场景</li>
<li>react diff算法</li>
<li>react实现滚动加载更多</li>
<li>实习的前端框架了解吗</li>
<li>webpack了解吗</li>
<li>项目过程中遇到最大的问题（感觉应该说一下尾递归优化的事情啊啊啊啊啊。。。一紧张给忘了）</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018阿里春招前端实习面试总结]]></title>
      <url>/2018/04/26/2018%E9%98%BF%E9%87%8C%E6%98%A5%E6%8B%9B%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>阿里的面试通知真的是等了太久了。。。老早就内推上去了，一直没有通知，然后在有赞约面试时间之后的一个小时后阿里打来了电话。一面感觉还行，问的问题很基础。</p>
<p>一面：</p>
<ul>
<li>自我介绍</li>
<li>介绍下做过的项目</li>
<li>原型链继承</li>
<li>闭包</li>
<li>js对象深拷贝和浅拷贝（这个问题怎么都问。。。）</li>
<li>如何判断一个变量是不是数组</li>
<li>new 一个function和直接调用一个function的区别</li>
<li>平时在学校的课程有哪些</li>
<li>职业规划</li>
</ul>
<p>…</p>
<p>二面：</p>
<p>二面电话信号不太好还是怎么样，听不大清楚，有几个问题后来回想了下我应该是知道的，但是当时没听清。。。很迷</p>
<ul>
<li><p>css优先级</p>
</li>
<li><p>css盒模型</p>
</li>
<li><p>css哪个属性改变盒子标准</p>
</li>
<li><p>css实现水平垂直居中</p>
</li>
<li><p>css的position</p>
</li>
<li><p>js基本类型</p>
</li>
<li><p>一个table里很多单元格，点击一个就显示单元格的内容</p>
</li>
<li><p>事件的target（不了解，跳过了）</p>
</li>
<li><p>js拷贝数组</p>
</li>
<li><p>js数组去重</p>
</li>
<li><p>js闭包</p>
</li>
<li><p>js作用域</p>
</li>
<li><p>this改变作用域（当时没听清。。。用apply或者call就行了）</p>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018有赞春招前端实习面试总结]]></title>
      <url>/2018/04/26/2018%E6%9C%89%E8%B5%9E%E6%98%A5%E6%8B%9B%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>之前投了有赞，了解以后感觉是家挺不错的公司，24号我在机场的时候打来电话约时间面试，最后在25号进行一面。感觉问的还是比较基础的知识，面试官人很nice，整个面试下来感觉不错。</p>
<p>一面：</p>
<ul>
<li>自我介绍</li>
<li>能实习多久</li>
<li>介绍一下最近在做的web服务器项目</li>
<li>http get和post请求的区别（特别问了下使用上的区别）</li>
<li>外包项目里特别提到了双语言实现，能说一下原理吗</li>
<li>js基本数据类型（我说了五个，面试官补充了ES6的symbol）</li>
<li>position属性</li>
<li>js深拷贝</li>
<li>js实习二叉树</li>
<li>原生js要删除一个DOM节点怎么做</li>
<li>apply和call的区别</li>
<li>ES6 ES7有哪些新的内容</li>
<li>如果要学习ES6和ES7需要多久</li>
<li>vue了解吗</li>
<li>css怎么实现一个正方形</li>
<li>最近在学习什么新的技术</li>
</ul>
<p>还有一个问题没理解意思，就不写了。。然后好像还问了其他的，记不太清楚了。</p>
<p>…</p>
<p>二面有点懵逼，刚开始会议室太热了，好多问题没想好就回答了。。。当然主要还是自己基础不太扎实。。。</p>
<p>二面：</p>
<ul>
<li><p>能实习多久</p>
</li>
<li><p>介绍一下做过的项目</p>
</li>
<li><p>使用的操作系统</p>
</li>
<li><p>习惯使用命令行吗</p>
</li>
<li><p>常用的版本管理工具</p>
</li>
<li><p>技术栈</p>
</li>
<li><p>原生js实现ajax</p>
</li>
<li><p>http状态码</p>
</li>
<li><p>浏览器存储，使用场景</p>
</li>
<li><p>flex布局的好处</p>
</li>
<li><p>实现三列布局，每一列等宽，间距10px</p>
</li>
<li><p>js二叉树的对象表示</p>
</li>
<li><p>反转二叉树</p>
</li>
<li><p>然后给了几道题目现场做：</p>
<ul>
<li><p>cdn的作用</p>
</li>
<li><p>画出下列布局：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        #a &#123;</span></span><br><span class="line"><span class="undefined">            background: red;</span></span><br><span class="line"><span class="undefined">            font-size: 20px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">        #b &#123;</span></span><br><span class="line"><span class="undefined">            background: green;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            font-size: 20px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">        #c &#123;</span></span><br><span class="line"><span class="undefined">            background: yellow;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            font-size: 40px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">        #d &#123;</span></span><br><span class="line"><span class="undefined">            background: violet;</span></span><br><span class="line"><span class="undefined">            font-size: 20px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">        aaa</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">            bbb</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"c"</span>&gt;</span></span><br><span class="line">            ccc</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d"</span>&gt;</span></span><br><span class="line">            d</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>css权重</p>
</li>
<li><p>给出输出：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pro = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pro1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"execution 1"</span>);</span><br><span class="line">            resolve(<span class="string">"resolve 1"</span>);</span><br><span class="line">        &#125;,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"execution 2"</span>);</span><br><span class="line">        resolve(<span class="string">"resolve 2"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"execution 3"</span>);</span><br><span class="line">    resolve(<span class="string">"resolve 3"</span>);</span><br><span class="line">    pro1.then(<span class="function">(<span class="params">args</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(args);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">pro.then(<span class="function">(<span class="params">args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>大致是一个使用setTimeout方法保证队列中的事件按序执行的函数，但写法比较复杂，让我写出函数的作用以及尽量精简实现</p>
</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vivado综合不动的解决过程]]></title>
      <url>/2018/04/20/vivado%E7%BB%BC%E5%90%88%E4%B8%8D%E5%8A%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>今天写I2C的时候发现vivado综合突然出问题了，点击run synthesis以后一直卡在那里不动，.runs里也没有log。退出综合以后控制台报了一个warning：</p>
<p>vivado WARNING: [Vivado 12-1017] Problems encountered: 1. PID not specified</p>
<p>Google了一番发现Xilinx的论坛里也有人遇到这个问题，官方回复是更新vivado。。emmm。。。</p>
<p>后来偶然发现虚拟机里还有一个vivado进程在运行，任务管理器里kill掉就好了。大功告成！:accept:</p>
]]></content>
      
        <categories>
            
            <category> verilog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> verilog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018网易春招前端实习面试]]></title>
      <url>/2018/04/19/2018%E7%BD%91%E6%98%93%E6%98%A5%E6%8B%9B%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>一面很顺利，然鹅二面挂了。。。很心累</p>
<p>一面：</p>
<p>先自我介绍</p>
<ol>
<li>平时怎么学前端？</li>
<li>JS红宝书里前几章内容还记得吗？</li>
<li>变量提升</li>
<li>js深拷贝</li>
<li>实现getType(var a)方法，给出a的类型（字符串形式）</li>
<li>对前端的理解和看法</li>
<li>如果我负责的项目明天就要上线了，但有个问题短时间内无法解决，我要怎么办</li>
</ol>
<p>二面：</p>
<p>依旧自我介绍</p>
<ol>
<li>哪个项目印象最深？为什么</li>
<li>实现多语言的原理</li>
<li>框架用过吗？双向绑定了解吗？</li>
<li>ajax过程</li>
<li>promise了解吗</li>
<li>（还问了个问题，我没听过，现在想不起来了。。）</li>
<li>模块化了解吗</li>
<li>array的api用过哪些？（详细问了reduce）</li>
<li>css的flex布局了解吗</li>
<li>css的position有哪几种</li>
<li>实现一个布局（左右两栏，左边是商品介绍，右边是商品图片）</li>
</ol>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018拼多多春招前端实习笔试]]></title>
      <url>/2018/04/03/2018%E6%8B%BC%E5%A4%9A%E5%A4%9A%E6%98%A5%E6%8B%9B%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AF%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>相比网易的笔试，拼多多笔试显得“简单”很多。可能因为基础考的不那么多吧，主要侧重点还是js了，所以做的相对顺手一点。考试时间一个半小时，我一个小时做完，甚至还把题目都抄了下来。。。</p>
</blockquote>
<h3 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h3><p>三类：单项选择题（16道，45分），不定项选择题（5道，25分），问答题（2道，30分）。</p>
<h3 id="题目回忆"><a href="#题目回忆" class="headerlink" title="题目回忆"></a>题目回忆</h3><h4 id="单项选择"><a href="#单项选择" class="headerlink" title="单项选择"></a>单项选择</h4><ol>
<li><p>给出以下js代码的输出结果：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> x;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;)(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>出错</li>
<li>NaN</li>
<li><strong>2</strong></li>
<li>undefined</li>
</ul>
<p>——</p>
<p>delete不删除变量或函数，删除的是对象上的属性。这里copy一下mdn上的描述：</p>
<blockquote>
<p>与通常对 delete 的理解不同，delete 操作符与直接释放内存<strong>无关</strong>。内存管理 通过断开引用来间接完成的，查看<a href="https://developer.mozilla.org/zh-CNdocs/Web/JavaScript/Memory_Management" target="_blank" rel="noopener">内存管理</a>页可了解详情。</p>
<p><strong>delete</strong> 操作符会从某个对象上移除指定属性。成功删除的时候回返回 <code>true</code>，否则返回 <code>false</code>。但是，以下情况需要重点考虑：</p>
<ul>
<li><p>如果你试图删除的属性不存在，那么delete将不会起任何作用，但仍会返回true</p>
</li>
<li><p>如果对象的原型链上有一个与待删除属性同名的属性，那么删除属性之后，对象会使用原型链上的那个属性（也就是说，delete操作只会在自身的属性上起作用）</p>
</li>
<li><p>任何使用 </p>
<p><code>var</code></p>
<p>声明的属性不能从全局作用域或函数的作用域中删除。</p>
<ul>
<li>这样的话，delete操作不能删除任何在全局作用域中的函数（无论这个函数是来自于函数声明或函数表达式）</li>
<li>除了在全局作用域中的函数不能被删除，在对象(object)中的函数是能够用delete操作删除的。</li>
</ul>
</li>
<li><p>任何用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="noopener"><code>let</code></a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const" target="_blank" rel="noopener"><code>const</code></a>声明的属性不能够从它被声明的作用域中删除。</p>
</li>
<li><p>不可设置的(Non-configurable)属性不能被移除。这意味着像<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math" target="_blank" rel="noopener"><code>Math</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array" target="_blank" rel="noopener"><code>Array</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noopener"><code>Object</code></a>内置对象的属性以及使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener"><code>Object.defineProperty()</code></a>方法设置为不可设置的属性不能被删除。</p>
</li>
</ul>
</blockquote>
<p>​</p>
</li>
<li><p>给出以下js代码，对某个input标签进行点击，输出结果是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">input.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mousedown'</span>);</span><br><span class="line">&#125;</span><br><span class="line">input.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mouseon'</span>);</span><br><span class="line">&#125;</span><br><span class="line">input.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line">&#125;</span><br><span class="line">input.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'focus'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>mousedown mouse focus click</li>
<li>mousedown click mouseup focus</li>
<li><strong>mousedown focus mouseup click</strong></li>
<li>mousedown mouseup click focus</li>
</ul>
<p>——</p>
<p>本题考的是鼠标行为触发顺序，按照C的顺序来</p>
</li>
<li><p>对于盒模型的描述</p>
<ul>
<li><strong>标准盒模型的总宽度：width+margin+border+padding</strong></li>
<li>IE盒模型的总宽度：width+margin+border+padding</li>
<li>IE盒模型的总宽度：width</li>
<li>标准盒模型的总宽度：width+margin+border</li>
</ul>
<p>——</p>
<p>本题考的是盒模型，标准盒模型宽度：元素的width和height属性只包含内容content部分，不包含内边距padding和边框border部分，即总宽度=width+margin+border+padding；而IE盒模型：元素的width和height属性同时包含内容content，内边距padding和边框border部分，即： width = content + padding + border，则总宽度为width+margin</p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.b=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.a;&#125;</span><br><span class="line">&#125;</span><br><span class="line">fn.prototype = &#123;</span><br><span class="line">    b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">    &#125;,</span><br><span class="line">    c: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myfn = <span class="keyword">new</span> fn();</span><br><span class="line"><span class="built_in">console</span>.log(myfn.b());</span><br><span class="line"><span class="built_in">console</span>.log(myfn.c());</span><br></pre></td></tr></table></figure>
<ul>
<li>Undefined, 2</li>
<li>0, 1</li>
<li>1, 2</li>
<li><strong>0, 2</strong></li>
</ul>
<p>——</p>
<p>感觉这道题没什么说的，考的是prototype，有oop思想即可。</p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b, ...c&#125; = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">u</span>:<span class="number">3</span>, <span class="attr">v</span>:<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br></pre></td></tr></table></figure>
<ul>
<li>[Object, Object]</li>
<li><strong>{u:3, v:4}</strong></li>
<li>3</li>
<li>4</li>
</ul>
<p>——</p>
<p>解构赋值和rest参数了解一下</p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line">a.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a[a.length<span class="number">-1</span>]);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>4</strong></li>
<li>3</li>
<li>1</li>
<li>2</li>
</ul>
<p>——</p>
<p>const用法问题，常量索引，不是说值不可变</p>
</li>
<li><p>如何让Hello world看不见？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">    Hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>三者都对</li>
<li><strong>.one {opacity:0;}</strong></li>
<li>.one {width:0; height:0;}</li>
<li>.one {z-index:-100;}</li>
</ul>
<p>——</p>
<p>z-index仅对于absolute元素有效；C的话文字溢出了，若将overflow设为hidden即看不见。</p>
</li>
<li><p>下列哪个选项可以正确的创建日期对象且没有兼容性问题？</p>
<ul>
<li>new Date(‘2017-06-25 12:12:12’);</li>
<li>new Date(‘2017/06/25 12:12:12’);</li>
<li>new Date(‘1500962729312’);</li>
<li><strong>new Date(2017,6,25,12,12,12);</strong></li>
</ul>
<p>——</p>
<p>考点Date构造函数接受的参数，C如果不是字符串就对了</p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 =<span class="number">111</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a1);</span><br><span class="line"><span class="built_in">console</span>.log(a2);</span><br><span class="line"><span class="built_in">console</span>.log(a3);</span><br><span class="line"><span class="keyword">var</span> a2 = <span class="number">222</span>;</span><br><span class="line">a3 = <span class="number">333</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>111 undefined undeifined</li>
<li>111 出错 undefined</li>
<li>111 222 333</li>
<li><strong>111 undefined 出错</strong></li>
</ul>
<p>——</p>
<p>变量提升了解一下</p>
</li>
<li><p>对于url：<a href="http://127.0.0.1:3000/" target="_blank" rel="noopener">http://127.0.0.1:3000/</a> ，以下哪个是它的hostname？</p>
<ul>
<li>//127.0.0.1</li>
<li>127.0.0.1:3000/</li>
<li><strong>127.0.0.1</strong></li>
<li>127.0.0.1:3000</li>
</ul>
<p>——</p>
<p>。。。</p>
</li>
<li><p>如何阻止这个元素的默认跳转事件？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"testId"</span> <span class="attr">href</span>=<span class="string">"https://www.pinduoduo.com/"</span>&gt;</span></span><br><span class="line">    hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>都可以</li>
<li><strong>a.onclick = function(e){preventDefault(e);}</strong></li>
<li>a.onmousedown = function(e){preventDefault(e)};</li>
<li>a.onmouseup = function(e){preventDefault(e)};</li>
</ul>
<p>——</p>
<p>组织a标签跳转的方法要在onclick中实现</p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> b;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>number number</strong></li>
<li>undefined number</li>
<li>number undefined</li>
<li>undefined undefined</li>
</ul>
<p>——</p>
<p>delete不能删除变量</p>
</li>
<li><p>下列哪个选项不属于浏览器存储？</p>
<ul>
<li><strong>session</strong></li>
<li>sessionStorage</li>
<li>cookie</li>
<li>localStorage</li>
</ul>
<p>——</p>
<p>浏览器存储数据的方式有三种：BCD</p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    a=a*<span class="number">10</span>;</span><br><span class="line">    b.item=<span class="number">5</span>;</span><br><span class="line">    c=&#123;<span class="attr">item</span>:<span class="number">5</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> y = &#123;<span class="attr">item</span>:<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> z = &#123;<span class="attr">item</span>:<span class="number">10</span>&#125;;</span><br><span class="line">test(x,y,z);</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="built_in">console</span>.log(y.item);</span><br><span class="line"><span class="built_in">console</span>.log(z.item);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>10 5 10</strong></li>
<li>10 10 10</li>
<li>10 5 5</li>
<li>10 10 5</li>
</ul>
<p>——</p>
<p>js参数传递的问题</p>
</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">b=&#123;<span class="attr">key</span>:<span class="string">'b'</span>&#125;;</span><br><span class="line">c=&#123;<span class="attr">key</span>:<span class="string">'c'</span>&#125;;</span><br><span class="line">a[b]=<span class="number">123</span>;</span><br><span class="line">a[c]=<span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a[b]);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>456</strong></li>
<li>123</li>
<li>B</li>
<li>C</li>
</ul>
<p>——</p>
<p>这题选A，我没做对。。具体参考<a href="https://blog.csdn.net/hellokingqwe/article/details/52688017" target="_blank" rel="noopener">csdn</a></p>
</li>
<li><p>DOM创建新节点的方法没有以下哪一项</p>
<ul>
<li>createTextNode</li>
<li><strong>createNode</strong></li>
<li>createDocumentFragment</li>
<li>createElement</li>
</ul>
</li>
</ol>
<h4 id="不定项选择"><a href="#不定项选择" class="headerlink" title="不定项选择"></a>不定项选择</h4><p>不确定正确与否，就不加粗答案了</p>
<ol>
<li><p>关于HTTP2.0的说法</p>
<ul>
<li>开始支持长连接</li>
<li>服务器推送</li>
<li>同一个连接可并发处理多请求</li>
<li>使用gzip算法对header压缩</li>
</ul>
</li>
<li><p>以下哪些事件会触发reflow</p>
<ul>
<li>改变窗口大小</li>
<li>display:none</li>
<li>改变元素宽高</li>
<li>改变font-size</li>
</ul>
<p>——</p>
<p><strong>触发repaint</strong></p>
<p>color的修改，如color=#ddd；</p>
<p>text-align的修改，如text-align=center；</p>
<p>a:hover也会造成重绘。</p>
<p>:hover引起的颜色等不导致页面回流的style变动。</p>
<p>​</p>
<p><strong>触发reflow</strong></p>
<p>调整窗口大小（Resizing the window）</p>
<p>改变字体（Changing the font）</p>
<p>增加或者移除样式表（Adding or removing a stylesheet）</p>
<p>内容变化，比如用户在input框中输入文字（Content changes, such as a user typing text in an input box）</p>
<p>激活 CSS 伪类，比如 :hover (IE 中为兄弟结点伪类的激活)（Activation of CSS pseudo classes such as :hover (in IE the activation of the pseudo class of a sibling)）</p>
<p>操作 class 属性（Manipulating the class attribute）</p>
<p>脚本操作 DOM（A script manipulating the DOM）</p>
<p>计算 offsetWidth 和 offsetHeight 属性（Calculating offsetWidth and offsetHeight）</p>
<p>设置 style 属性的值 （Setting a property of the style attribute）</p>
<p>​    </p>
</li>
<li><p>选正确的：</p>
<ul>
<li>IE中attachEvent中的this总指向函数的直接调用者</li>
<li><strong>this总指向函数的非间接调用者</strong></li>
<li><strong>若有new关键字，则this指向new出的对象</strong></li>
<li><strong>this总指向函数的直接调用者</strong></li>
</ul>
<p>——</p>
<p>A中IE中的attachEvent中的this总是指向全局对象Window</p>
</li>
<li><p>http状态码描述正确的有</p>
<ul>
<li>404 Not Found 无法找到资源</li>
<li>401 Unauthorized 禁止访问</li>
<li>304 Not Modified 未修改</li>
<li>400 Bad Request 无法理解请求格式</li>
</ul>
</li>
<li><p>不稳定的排序算法有：</p>
<ul>
<li><strong>选择排序</strong></li>
<li>冒泡排序</li>
<li>插入排序</li>
<li><strong>快速排序</strong></li>
</ul>
</li>
</ol>
<h4 id="问答题"><a href="#问答题" class="headerlink" title="问答题"></a>问答题</h4><ol>
<li><p>使用js实现randomStr(n)方法，使其生成长度为n的随机字符串，字符集：[a-z][A-Z][0-9]和’+’，’=’共64个字符</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">randomStr = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    charset = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">'m'</span>,<span class="string">'n'</span>,<span class="string">'o'</span>,<span class="string">'p'</span>,<span class="string">'q'</span>,<span class="string">'r'</span>,<span class="string">'s'</span>,<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'v'</span>,<span class="string">'w'</span>,<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>,<span class="string">'I'</span>,<span class="string">'J'</span>,<span class="string">'K'</span>,<span class="string">'L'</span>,<span class="string">'M'</span>,<span class="string">'N'</span>,<span class="string">'O'</span>,<span class="string">'P'</span>,<span class="string">'Q'</span>,<span class="string">'R'</span>,<span class="string">'S'</span>,<span class="string">'T'</span>,<span class="string">'U'</span>,<span class="string">'V'</span>,<span class="string">'W'</span>,<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'Z'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'+'</span>,<span class="string">'='</span>];</span><br><span class="line">    <span class="keyword">var</span> res = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        res+=charset[<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">64</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用js实现归并排序，合并两个有序数列</p>
<p>太简单了不写了。。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018网易春招前端实习笔试]]></title>
      <url>/2018/03/28/2018%E7%BD%91%E6%98%93%E6%98%A5%E6%8B%9B%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>先谈感想：基本功不扎实，不好好学习的下场终于来了……还是要打好基础啊</p>
<hr>
<h3 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h3><p>三类：选择题（20道，20分），编程题（3道，60分），问答题（2道，20分）。</p>
<h3 id="题目回忆"><a href="#题目回忆" class="headerlink" title="题目回忆"></a>题目回忆</h3><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>这里按照考点内容简单分类</p>
<ol>
<li>【操作系统】进程与线程</li>
<li>【数据结构】一棵度为4的树有10个节点，选项：<ul>
<li>高度至多6，</li>
<li>高度至多7，</li>
<li>高度至少6，</li>
<li>高度至少7.</li>
</ul>
</li>
<li>【数据结构】希尔排序，问增量取5的第一趟排序结果</li>
<li>【数据结构】快速排序，问哪个选项不可能是第二趟快速排序的结果</li>
<li>【数据结构】一棵二叉树的中序遍历是abcdef，高度最小的不可能的二叉树前序遍历是（dbacfe，cbaedf，cabefd，dbacef）</li>
<li>【数据结构】查找二叉树，为了查找321的节点，不可能出现的查找序列</li>
<li>【数据结构+信安】哈希算法在信息安全中的应用，给(1)(2)(3)三个应用场景，四个选项中对其进行排列组合，选出正确的一个</li>
<li>【计网】关于电子邮件说法不正确的是：<ul>
<li>POPs的特点是只要用户从服务器上读取了邮件，就把该邮件删除；</li>
<li>IMAP协议不支持创建自定义的文件；</li>
<li>IMAP协议中客户端和服务器上的邮件保持同步；</li>
<li>SMTP能发送ASCii码和二进制文件。</li>
</ul>
</li>
<li>【计网】关于UDP通信，选不正确的</li>
<li>【计网】关于http1.1和http1.0，选不正确的。记得两个选项：<ul>
<li>http1.0只能短连接，http1.1只能长连接</li>
<li>http1.1增加host字段</li>
</ul>
</li>
<li>【计网】关于http说法不正确的：<ul>
<li>304表示临时重定向；</li>
<li>range请求响应一定是用Http状态码206表示成功；</li>
<li>Http header分隔符是\r；</li>
<li>请求如果包含%，需进行encode。</li>
</ul>
</li>
<li>【html+css】CSS2中的outline说法，选不正确的（有一个选项是outline-width为auto和为0px的效果一样）</li>
<li>【html+css】有关margin，具体不记得了</li>
<li>【html+css】有关svg，记得一个选项：svg使用XML格式定义图像</li>
<li>【html+css】a:hover,a:visited,a:active,a:link，总之记住L-V-H-A即可</li>
<li>【html+css】css定位，记得三个选项：<ul>
<li>relative可以基于absoluate定位</li>
<li>absolute基于最近的static定位</li>
<li>子元素不能继承父元素的position</li>
</ul>
</li>
<li>【js】a不是空数组，且b===a，哪个选项使a.length和b.length都为0，记得三个：<ul>
<li>b.length=0</li>
<li>a.splice(0,a.length)</li>
<li>a.slice(a.length)</li>
</ul>
</li>
<li>【js】数组操作，选错误的，其中三个选项分别考了unshift、concat、join</li>
<li>【其他】cookie和localstorage，选错误的，有个选项是在与服务器通信时，两者都会携带在http头中</li>
<li>【其他】json</li>
</ol>
<h4 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h4><ol>
<li><p>出门朝北，左右转向，输出最后朝向的方向</p>
<p><strong>输入：</strong>转方向的次数N，长度为N的字符串，由L,R组成，L表示左转，R表示右转；</p>
<p><strong>输出：</strong>   此时面朝的方向</p>
</li>
<li><p>x,y均不大于n，并且x除以y的余数大于等于k （1&lt;=n&lt;=10^5, 0&lt;=k&lt;=n-1），求满足要求的数对(x,y)数量</p>
<p><strong>输入：</strong>n,k</p>
<p><strong>输出：</strong>满足要求的数对数量</p>
</li>
<li><p>神奇数列 ：1，12，123，..，12345678910，1234567891011，求从数列l~r（l，r是从1开始的下标）有多少个能被3整除</p>
<p><strong>输入：</strong>l,r</p>
<p><strong>输出：</strong>这一区间能被3整除的个数</p>
</li>
</ol>
<h4 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h4><ol>
<li><p>列举使用过的前端性能优化方案，描述场景并详细介绍。</p>
</li>
<li><p>公司放映系统最近要上线一个【预订随机推荐电影】功能，每天用户通过系统预订名额，由系统每日推荐一部电影，按时推送到用户。现在，在系统已有如下异步方法封装的前提下： </p>
<ul>
<li>getTodayUsers(callback):获取今日预定的用户id列表，使用如下：getTodayUsers(userIds=&gt;{ console.log(userIds)})，即回调中拿到用户id列表      </li>
<li>getTodayMovie(callback):获取今日推荐的电影id，使用如下：getTodayMovie( movieId=&gt;{ console.log(movieId )})，即回调中拿到今日的电影id      </li>
<li>bookMovieForUsers(userIds, movieId, callback)：使用用户id列表预订某部电影，使用如下bookMovieForUsers([1, 2, 3], 1000, ()=&gt;{console.log(“预订成功了”)})     </li>
</ul>
<p>请封装一个bookTodayMovieForTodayUser()的方法，它的作用是为今天预订的用户订阅今天系统推荐的电影，它返回一个promise，这个promise在请求后被resolve，使用方法如下：bookTodayMovieForTodayUser().then( ()=&gt;console.log(“预订成功”))。注：简单起见，所有情况都不需考虑失败情况</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[外包项目总结]]></title>
      <url>/2018/03/26/%E5%A4%96%E5%8C%85%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>去年年末时脑子一抽接了个外包，甲方是浙财的大二的一个创业团队，对技术方面完全不懂，整个过程有点迷。。还好任务难度不大，主要是做一个外国人在国内求职的信息聚合网站，整个开发过程历时半个月，在此将开发过程中遇到的问题记录下来。</p>
</blockquote>
<h4 id="Goals（copy甲方的要求）"><a href="#Goals（copy甲方的要求）" class="headerlink" title="Goals（copy甲方的要求）"></a>Goals（copy甲方的要求）</h4><ol>
<li><p>收集应聘者的个人资料，包括自我简介、简历以及自我介绍的视频。网站上有上传文本和视频的功能，应聘者可以自行上传资料，后台自动打包保存在服务器里。为了保证人才的质量，后台需具备人工筛选的功能，符合最低要求的简历和处理过视频内敏感信息的视频会由后台再放在网站上，供客户浏览挑选。如果有符合客户要求的应聘者的资料，客户可以选择信息的收藏和下载。这是一个收集信息再放出信息的过程。</p>
<p>以下是一些具体细节：</p>
<ul>
<li>上传：应聘者通过网站自带模版填写相应的简介后保存，大致包括姓名、性别、年龄、国籍、学历、专业、意向岗位等，并上传简历和视频。自我介绍的视频时长不超过2分钟，格式要求mp4（或者方便网页使用的）。简历以word或者pdf形式上传。</li>
<li>视频观看：后台先筛选之后才能放在平台上供客户查看，视频播放中有播放进度控制按钮、暂停键和全屏与缩小选项。</li>
<li>检索：需要设计一个检索，将应聘者按地区，国籍进行分类，同时也应该有一个搜索栏，可以直接搜索国籍地区，用于方便客户查找。对留学生信息的检索。设置洲和国家二级栏目。</li>
</ul>
</li>
<li><p>网站还要能放上企业的招聘公告，这是雇主与雇员双方信息交互的过程。招聘公告通过岗位分类，也可以通过岗位进行检索。网站界面上还应设置公示栏，公开宣布企业与雇员配对成功的案例，以此来振奋人心，吸引人气！</p>
</li>
</ol>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>​    Django1.8 + python3</p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol>
<li><p>采用默认用户认证系统条件下创建两种用户类型</p>
<ul>
<li><p>参照<a href="https://stackoverflow.com/questions/9650133/django-multiple-user-profiles" target="_blank" rel="noopener">stackoverflow</a>的回答，首先自定义一个UserProfile类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_save</span><br><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext_lazy <span class="keyword">as</span> _</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfile</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    USER_TYPE = ((<span class="number">0</span>,<span class="string">'Jobseeker'</span>),(<span class="number">1</span>,<span class="string">'Employer'</span>))</span><br><span class="line">    isEmployer = models.BooleanField(choices=USER_TYPE,default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>接着定义两种用户类型，其中一个字段是与UserProfile一一映射</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jobseeker</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    user = models.OneToOneField(UserProfile, on_delete=models.CASCADE, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employer</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    user = models.OneToOneField(UserProfile, on_delete=models.CASCADE, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
</li>
<li><p>⚠️注意：要将settings.py中的用户类型修改为UserProfile</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUTH_USER_MODEL = <span class="string">'accounts.UserProfile'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改注册的form：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.forms <span class="keyword">import</span> UserCreationForm,</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserProfile,Jobseeker,Employer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignupForm</span><span class="params">(UserCreationForm)</span>:</span></span><br><span class="line">    typechoice=forms.ChoiceField(label=_(<span class="string">'User Type'</span>),choices=((<span class="number">0</span>,_(<span class="string">'Jobseeker'</span>)),(<span class="number">1</span>,_(<span class="string">'Employer'</span>))),widget=forms.RadioSelect)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = UserProfile</span><br><span class="line">        fields = (<span class="string">'username'</span>,<span class="string">'email'</span>,<span class="string">'password1'</span>,<span class="string">'password2'</span>)</span><br><span class="line"><span class="meta">    @transaction.atomic</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        user = super().save(commit=<span class="keyword">False</span>)</span><br><span class="line">        user.isEmployer=int(self.cleaned_data.get(<span class="string">'typechoice'</span>))</span><br><span class="line">        <span class="comment">#print(type(user.isEmployer))</span></span><br><span class="line">        user.save()</span><br><span class="line">        <span class="keyword">if</span> user.isEmployer:</span><br><span class="line">            Employer.objects.create(user=user)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Jobseeker.objects.create(user=user)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>国际化</p>
<ul>
<li><p>参照<a href="https://code.ziqiangxuetang.com/django/django-internationalization.html" target="_blank" rel="noopener">自强学堂</a>和<a href="https://docs.djangoproject.com/en/1.8/topics/i18n/" target="_blank" rel="noopener">django文档</a></p>
</li>
<li><p>//Mac上配置gettext（参照<a href="https://stackoverflow.com/questions/27220052/django-i18n-make-sure-you-have-gnu-gettext-tools" target="_blank" rel="noopener">stackoverflow</a>）</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install gettext</span><br><span class="line">brew link gettext --force</span><br></pre></td></tr></table></figure>
<p>ps.第二句不安全，本应按照高赞回答来的，但是为了省事还是选择了不安全的做法……</p>
</li>
<li><p>在settings.py中进行如下设置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE_CLASSES = ( </span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'django.middleware.locale.LocaleMiddleware'</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line">...</span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                </span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.media'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">                <span class="string">'django.core.context_processors.i18n'</span>, <span class="comment"># 重点是这个</span></span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="keyword">True</span></span><br><span class="line">LANGUAGES = (</span><br><span class="line">    (<span class="string">'en'</span>, _(<span class="string">'English'</span>)),</span><br><span class="line">    (<span class="string">'zh-cn'</span>, _(<span class="string">'Chinese'</span>)),</span><br><span class="line">    </span><br><span class="line">)</span><br><span class="line">LOCALE_PATHS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'locale'</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开发过程中的翻译</p>
<p>在urls.py中加入：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">	url(<span class="string">r'^i18n/'</span>, include(<span class="string">'django.conf.urls.i18n'</span>)),</span><br><span class="line">  	...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>import ugettext_lazy（不知道为啥起初我试ugettext就不起作用），需要翻译的字符串用_()包裹</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> ugettext_lazy <span class="keyword">as</span> _</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    typeChoices = (</span><br><span class="line">        (<span class="string">'Fulltime'</span>,_(<span class="string">'Full Time'</span>)),</span><br><span class="line">        (<span class="string">'Parttime'</span>,_(<span class="string">'Part Time'</span>)),</span><br><span class="line">        (<span class="string">'Intern'</span>,_(<span class="string">'Intern'</span>)),</span><br><span class="line">        (<span class="string">'Freelance'</span>,_(<span class="string">'Freelance'</span>)),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<h4 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h4><p>每个模板（注意是每个）前都加上</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> i18n %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<p>需要翻译的字符串使用&#123; % trans % &#125;标签包裹</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">trans</span></span> 'Job Type' %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><p>在根目录的urls.py下加入</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.i18n <span class="keyword">import</span> javascript_catalog</span><br><span class="line"></span><br><span class="line">js_info_dict = &#123;</span><br><span class="line">    <span class="string">'packages'</span>: (<span class="string">'jobsite'</span>,),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">urlpatterns += [</span><br><span class="line">    url(<span class="string">r'^jsi18n/$'</span>, javascript_catalog, js_info_dict, name=<span class="string">"js_catalog"</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>然后在需要翻译的页面中加入</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'js_catalog' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>待翻译的字符串用gettext()函数包裹</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(json);</span><br><span class="line">  <span class="keyword">if</span> (json[<span class="string">'res'</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">    $(<span class="string">'#modalContent'</span>).text(gettext(<span class="string">"Successfully applied!"</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json[<span class="string">'res'</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">    $(<span class="string">'#modalContent'</span>).text(gettext(<span class="string">"You should log in first!"</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json[<span class="string">'res'</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">    $(<span class="string">'#modalContent'</span>).text(gettext(<span class="string">"You have applied for this job first!"</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json[<span class="string">'res'</span>] == <span class="number">3</span>) &#123;</span><br><span class="line">    $(<span class="string">'#modalContent'</span>).text(gettext(<span class="string">"Your information has not been reviewed!"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成.po。</p>
<p>⚠️：中文一定要用zh_Hans，zh-cn、zh_CN、zh-hans等都是不对的（不过我也不知道为什么在本地开发时使用zh_hans也是ok的）。</p>
<p>后面加上-i venv是防止将虚拟运行环境中的待翻译字符串也一并加载进来</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemessages -l zh_Hans -i venv</span><br><span class="line">python3 manage.py makemessages -l en -i venv</span><br></pre></td></tr></table></figure>
<p>第一次创建目录以后再生成就可以不用这么麻烦了，直接</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemessages -a -i venv</span><br></pre></td></tr></table></figure>
<p>但对于js，以上命令不适用，应使用</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemessages -e html,js -d djangojs -i venv</span><br></pre></td></tr></table></figure>
</li>
<li><p>在locale目录下生成的.po文件中进行翻译，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#: jobsite/templates/jobsite/base.html:94</span><br><span class="line">msgid &quot;Home&quot;</span><br><span class="line">msgstr &quot;主页&quot;</span><br></pre></td></tr></table></figure>
<p>⚠️：包含#, fuzzy的词条不会正常翻译，应手动更改后删除#, fuzzy。</p>
</li>
<li><p>编译生成的.po</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py compilemessages</span><br></pre></td></tr></table></figure>
<p>编译好以后应该可以正常显示了</p>
</li>
<li><p>留出一个切换语言的接口</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span> <span class="attr">name</span>=<span class="string">"langform"</span> <span class="attr">id</span>=<span class="string">"langform"</span> <span class="attr">method</span>=<span class="string">'post'</span>&gt;</span></span><br><span class="line">  &#123;% csrf_token %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"language"</span> <span class="attr">name</span>=<span class="string">"language"</span> <span class="attr">onchange</span>=<span class="string">"selectdo(this)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span> &gt;</span>Language: </span><br><span class="line">      &#123;% get_language_info for LANGUAGE_CODE as lang %&#125;</span><br><span class="line">      &#123;&#123; lang.name_local &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    &#123;% for lang in LANGUAGES %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; lang.0 &#125;&#125;"</span> &gt;</span> &#123;&#123; lang.1 &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">selectdo</span>(<span class="params">obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    str = <span class="string">"/i18n/setlang/"</span>;</span></span><br><span class="line"><span class="javascript">    myform = <span class="built_in">document</span>.getElementById(<span class="string">'langform'</span>);</span></span><br><span class="line"><span class="javascript">    myform.method = <span class="string">"POST"</span>;</span></span><br><span class="line"><span class="undefined">    myform.action = str;</span></span><br><span class="line"><span class="undefined">    myform.submit();</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>部署到服务器时发现无法访问静态文件，在urls.py中加入</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line">urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)</span><br></pre></td></tr></table></figure>
<p>同时在/etc/nginx/sites-available/目录下添加ywzy.conf：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">charset</span>     utf-<span class="number">8</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">2G</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">5</span>;</span><br><span class="line">    <span class="attribute">location</span> /media  &#123;</span><br><span class="line">        <span class="attribute">alias</span> /var/www/html/ywzy/media;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="attribute">location</span> /static &#123;</span><br><span class="line">        <span class="attribute">alias</span> /var/www/html/ywzy/static;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>  http://127.0.0.1:8001;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">include</span>     /etc/nginx/uwsgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后链接至启用站点目录下</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/ywzy.conf /etc/nginx/sites-enabled/ywzy.conf</span><br><span class="line">rm /etc/nginx/sites-enables/default</span><br></pre></td></tr></table></figure>
<p>重启nginx</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署的过程中尝试了uwsgi（自强学堂推荐的），但不知道为什么总是报错，就用了gunicorn替代（这里gevent需要pip安装一下）</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn --chdir /var/www/html/ywzy --pythonpath venv/ --worker-class=gevent -b0.0.0.0:8001 -w4 ywzy.wsgi:application</span><br></pre></td></tr></table></figure>
<p>管理进程也尝试了supervisor，但发现不支持pyhton3…于是使用nohup，日志记录在nohup.out中</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup gunicorn --chdir /var/www/html/ywzy --pythonpath venv/ --worker-class=gevent -b0.0.0.0:8001 -w4 ywzy.wsgi:application&amp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务器部署阶段还遇到了关于python版本和pip版本不对的问题。。。再加上有虚拟运行环境，这类问题频繁出现，最后发现只要保证启用虚拟运行环境以后运行python使用python3命令，运行pip使用pip3命令，大部分问题都能解决，面向google编程……</p>
</li>
</ol>
<h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>​    我还是太菜了……本以为能很快做完的……看来还需要努力</p>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客搭建-material主题下评论系统完善]]></title>
      <url>/2018/02/20/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-material%E4%B8%BB%E9%A2%98%E4%B8%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%AE%8C%E5%96%84/</url>
      <content type="html"><![CDATA[<p>博客搭建至今，共尝试使用过很多个评论系统（如disqus、多说、gitment、gitalk等），我对评论系统大致有以下三点要求：1. 不用翻墙 2. 无需备案 3. 方便快捷。综合考虑，原本多说是比较好的一个选择，但是由于种种原因，多说在2017年6月已经关闭服务了，我便采用了disqus，但是奈何需要翻墙，总是让我这个强迫症有一点不爽。直到放了寒假，要把博客数据挪到mac上时才发现有了gitment和gitalk这两款利用github的issue功能搭建起来的轻便版评论系统，正合我意啊！因此便开始了不到黄河心不死，不撞南墙不回头的瞎鼓捣之旅。。。</p>
<h3 id="gitment与gitalk比较"><a href="#gitment与gitalk比较" class="headerlink" title="gitment与gitalk比较"></a>gitment与gitalk比较</h3><p><strong>同</strong></p>
<ul>
<li>均在前端直接引入，不需要后端代码</li>
<li>支持md、gfm和代码高亮</li>
<li>使用github账号登陆</li>
</ul>
<p><strong>异</strong></p>
<ul>
<li>gitment需要手动初始化每一篇的评论，而gitalk不需要</li>
</ul>
<p>虽然我的文章也不算多，但是由于实在太懒，便选择了gitalk。</p>
<p>链接附上：</p>
<p>gitment <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">https://github.com/imsun/gitment</a></p>
<p>gitalk <a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">https://github.com/gitalk/gitalk</a></p>
<h3 id="gitalk配置过程"><a href="#gitalk配置过程" class="headerlink" title="gitalk配置过程"></a>gitalk配置过程</h3><p>详细的配置过程如其github的readme，由于我用的material主题内嵌了这两个评论系统，配置过程不大一样，便在此说明。</p>
<h4 id="1-注册-OAuth-Application"><a href="#1-注册-OAuth-Application" class="headerlink" title="1. 注册 OAuth Application"></a>1. 注册 OAuth Application</h4><p><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击此处</a> 来注册一个新的 OAuth Application。如实填写，注意最后一个callback url要填写自己博客的url。注册成功后得到一个client ID和client secret。</p>
<h4 id="2-在material主题配置文件中修改相关配置"><a href="#2-在material主题配置文件中修改相关配置" class="headerlink" title="2. 在material主题配置文件中修改相关配置"></a>2. 在material主题配置文件中修改相关配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># themes/material/_config.yml</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">"gitalk"</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    <span class="comment"># gitment配置同gitalk</span></span><br><span class="line"><span class="attr">    gitment_repo:</span> <span class="string">KathyFlores.github.io</span>  <span class="comment"># git repo of the hexo</span></span><br><span class="line"><span class="attr">    gitment_owner:</span> <span class="string">KathyFlores</span> <span class="comment"># git repo's owner</span></span><br><span class="line"><span class="attr">    gitment_client_id:</span> <span class="string">xxx</span> <span class="comment"># github app client id 第一步中得到的client ID</span></span><br><span class="line">    <span class="string">gitment_client_secret</span> <span class="string">:</span> <span class="string">xxx</span> <span class="comment"># github app client secret 第一步中得到的client secret</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">    gitalk_repo:</span> <span class="string">KathyFlores.github.io</span> <span class="comment"># git repo of the hexo</span></span><br><span class="line"><span class="attr">    gitalk_owner:</span> <span class="string">KathyFlores</span> <span class="comment"># git repo's owner</span></span><br><span class="line"><span class="attr">    gitalk_client_id:</span> <span class="string">xxx</span> <span class="comment"># github app client id 第一步中得到的client ID</span></span><br><span class="line"><span class="attr">    gitalk_client_secret:</span> <span class="string">xxx</span> <span class="comment"># github app client secret 第一步中得到的client secret</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>
<h4 id="3-部署"><a href="#3-部署" class="headerlink" title="3. 部署"></a>3. 部署</h4><p>正常情况下，部署以后就会看到文章下成功出现了gitalk评论系统，登陆github账户以后也可以正常评论。但是我在实践过程中遇到了一个谜一样的报错：Error: Validation Failed。去gitalk项目的issue区看了看有一个人和我遇到了同样的问题，但不知道是什么原因，后来我发现是因为创建gitalk时会将当前post的url作为label创建一个issue，而issue的label长度最大只支持50个字符，如果文章标题有过多中文或长度太长，都会产生这个问题。</p>
<p>后续issue区有人提出，自行设定创建gitalk的id参数即可，可以用md5对url进行加密，也可直接截取前50个字符。我为了方便，选择了截取文章标题的前49个字符，在material主题下，只需修改themes/material/layout/_widget/gitalk/main.ejs:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Gitalk 评论框 --&gt;</span><br><span class="line">&lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var gitalk = new Gitalk(&#123;</span><br><span class="line">            clientID: &apos;&lt;%= theme.comment.gitalk_client_id %&gt;&apos;,</span><br><span class="line">            clientSecret: &apos;&lt;%= theme.comment.gitalk_client_secret %&gt;&apos;,</span><br><span class="line">            repo: &apos;&lt;%= theme.comment.gitalk_repo %&gt;&apos;,</span><br><span class="line">            owner: &apos;&lt;%= theme.comment.gitalk_owner %&gt;&apos;,</span><br><span class="line">            admin: [&apos;&lt;%= theme.comment.gitalk_owner %&gt;&apos;],</span><br><span class="line">            // facebook-like distraction free mode</span><br><span class="line">			id: &apos;&lt;%=  page.title.substr(0,48) %&gt;&apos;, // 加了这一行</span><br><span class="line">            distractionFreeMode: false</span><br><span class="line">        &#125;)</span><br><span class="line">   gitalk.render(&apos;gitalk-container&apos;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>若使用gitment，具体做法类似，修改themes/material/layout/_widget/gitment/enter.ejs:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用 gitcoment --&gt;</span><br><span class="line">&lt;div id=&quot;gitment-comment&quot;&gt;</span><br><span class="line">    &lt;%- partial(&apos;_widget/comment/&apos; + theme.comment.use + &apos;/main&apos;) %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #gitment-comment&#123;</span><br><span class="line">        background-color: #eee;</span><br><span class="line">        padding: 2pc;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var gitment = new Gitment(&#123;</span><br><span class="line">        //id: &apos;页面 ID&apos;, // 可选。默认为 location.href</span><br><span class="line">        id: &apos;&lt;%=  page.title.substr(0,48) %&gt;&apos;, // 加上这一行</span><br><span class="line">        owner: &apos;&lt;%= theme.comment.gitment_owner %&gt;&apos;,</span><br><span class="line">        repo: &apos;&lt;%= theme.comment.gitment_repo %&gt;&apos;,</span><br><span class="line">        oauth: &#123;</span><br><span class="line">            client_id: &apos;&lt;%= theme.comment.gitment_client_id %&gt;&apos;,</span><br><span class="line">            client_secret: &apos;&lt;%= theme.comment.gitment_client_secret %&gt;&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    gitment.render(&apos;container&apos;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>md5加密方法与我的做法大同小异，具体可参见<a href="https://priesttomb.github.io/日常/2018/02/12/处理Gitalk中由于文章URL过长导致的Validation-Failed%28422%29/" target="_blank" rel="noopener">@<strong>PriestTomb</strong>的文章</a>。</p>
]]></content>
      
        <categories>
            
            <category> blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 命名空间]]></title>
      <url>/2017/04/04/PHP-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
      <content type="html"><![CDATA[<h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><hr>
<blockquote>
<p>今天被计组的bug折磨了将近一整天，现在有点头昏脑胀。命名空间这节学的乱七八糟的，大多都是copy文档。之后有时间再慢慢消化。（又挖了个坑）清明假期终于要结束了，我还真是什么都没做呢，sad</p>
</blockquote>
<p><strong>命名空间</strong>是在PHP 5.3中加入的，最明确的目的就是解决重名问题。</p>
<h2 id="1-定义命名空间"><a href="#1-定义命名空间" class="headerlink" title="1 定义命名空间"></a>1 定义命名空间</h2><p>命名空间通过namespace声明，声明必须在其他代码前。<br>可以在同一文件中定义不同的命名空间。</p>
<p>命名空间有两种定义方式：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyProject1</span>;  </span><br><span class="line"><span class="comment">// MyProject1 命名空间中的PHP代码  </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyProject2</span>;  </span><br><span class="line"><span class="comment">// MyProject2 命名空间中的PHP代码    </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 另一种定义方式</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyProject3</span> </span><br><span class="line">&#123;  </span><br><span class="line"> // <span class="title">MyProject3</span> 命名空间中的<span class="title">PHP</span>代码    </span><br><span class="line">&#125;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>在声明命名空间之前不能出现任何非PHP代码（包括空白符），唯一合法的代码是用于定义文件编码方式的语句，即<strong>程序脚本</strong>的第一条语句必须是<strong>命名空间声明</strong>或<strong>编码声明</strong>。</p>
<p>例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(encoding=<span class="string">'UTF-8'</span>); <span class="comment">//定义多个命名空间和不包含在命名空间中的代码</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="title">const</span> <span class="title">CONNECT_OK</span> = 1;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span>  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> </span><br><span class="line">&#123; // 全局代码</span><br><span class="line">    <span class="title">session_start</span>();</span><br><span class="line">    $a = MyProject\connect();</span><br><span class="line">    <span class="keyword">echo</span> MyProject\Connection::start();<span class="comment">//类似文件路径的语法： \空间名\元素名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-命名空间使用"><a href="#2-命名空间使用" class="headerlink" title="2 命名空间使用"></a>2 命名空间使用</h2><p>PHP命名空间中的类名可以通过三种方式引用：</p>
<p>1 <strong>非限定名称，或不包含前缀的类名</strong><br>    例如 $comment = new Comment();。如果当前命名空间是Blog\Article，Comment将被解析为Blog\Article\Comment。如果使用Comment的代码不包含在任何命名空间中的代码（全局空间中），则Comment会被解析为Comment。<br>    NOTE: 若命名空间中的函数或常量未定义，则该名称会被解析为全局名称。</p>
<p>2 <strong>限定名称，或包含前缀的名称</strong><br>    例如 $comment = new Article\Comment();。如果当前的命名空间是Blog，则Comment会被解析为Blog\Article\Comment。如果使用Comment的代码不包含在任何命名空间中的代码（全局空间中），则Comment会被解析为Comment。</p>
<p>3 <strong>完全限定名称，或包含了全局前缀操作符的名称</strong><br>    例如 $comment = new \Article\Comment();。在这种情况下，Comment总是被解析为代码中的文字名(literal name)Article\Comment。</p>
<p>这三者可以类比为文件名，相对路径名和绝对路径名。<br>NOTE: 访问任意全局类，函数或常量都可以使用完全限定名称。<br>例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Foo</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strlen</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> INI_ALL = <span class="number">3</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exception</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">$a = \strlen(<span class="string">'hi'</span>); <span class="comment">// 调用全局函数strlen</span></span><br><span class="line">$b = \INI_ALL; <span class="comment">// 访问全局常量 INI_ALL</span></span><br><span class="line">$c = <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'error'</span>); <span class="comment">// 实例化全局类 Exception</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-子命名空间"><a href="#3-子命名空间" class="headerlink" title="3 子命名空间"></a>3 子命名空间</h2><p>PHP允许指定层次化的命名空间。<br>子空间也可以定义多层。</p>
<p>例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//我用这样的命名空间表示处于blog下的article模块</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我用这样的命名空间表示处于blog下的message board模块</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">MessageBoard</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用当前空间即MessageBoard的类</span></span><br><span class="line">$comment = <span class="keyword">new</span> Comment();</span><br><span class="line"><span class="comment">//调用Blog\Article空间的类</span></span><br><span class="line">$article_comment = <span class="keyword">new</span> \Blog\Article\Comment();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="4-别名和导入"><a href="#4-别名和导入" class="headerlink" title="4 别名和导入"></a>4 别名和导入</h2><p>别名和导入可以看作是调用命名空间元素的一种快捷方式。<br><em>PHP不支持导入函数或常量。</em><br><strong>别名与导入都是通过use操作符实现</strong>,别名：use…as…;导入：use…;（这一点很像SQL，笑）<br>NOTE: 注意导入时两个命名空间不能有相同名字的元素。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个BBS空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BBS</span>;</span><br><span class="line"><span class="comment">//导入一个命名空间</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Blog</span>\<span class="title">Article</span>;</span><br><span class="line"><span class="comment">//导入命名空间后可使用限定名称调用元素</span></span><br><span class="line">$article_comment = <span class="keyword">new</span> Article\Comment();</span><br><span class="line"></span><br><span class="line"><span class="comment">//为命名空间使用别名</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Blog</span>\<span class="title">Article</span> <span class="title">as</span> <span class="title">Arte</span>;</span><br><span class="line"><span class="comment">//使用别名代替空间名</span></span><br><span class="line">$article_comment = <span class="keyword">new</span> Arte\Comment();</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入一个类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Blog</span>\<span class="title">Article</span>\<span class="title">Comment</span>;</span><br><span class="line"><span class="comment">//导入类后可使用非限定名称调用元素</span></span><br><span class="line">$article_comment = <span class="keyword">new</span> Comment();</span><br><span class="line"><span class="comment">//为类使用别名</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Blog</span>\<span class="title">Article</span>\<span class="title">Comment</span> <span class="title">as</span> <span class="title">Comt</span>;</span><br><span class="line"><span class="comment">//使用别名代替空间名</span></span><br><span class="line">$article_comment = <span class="keyword">new</span> Comt();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-namespace关键字与-NAMESPACE-常量"><a href="#5-namespace关键字与-NAMESPACE-常量" class="headerlink" title="5 namespace关键字与__NAMESPACE__常量"></a>5 namespace关键字与__NAMESPACE__常量</h2><ul>
<li>关键字namespace可以用来显示访问当前命名空间或子命名空间中的元素，等价于类中的self操作符。</li>
<li>常量__NAMESPACE__的值是包含当前命名空间名称的字符串。全局中的不包括在任何命名空间中的代码，该常量为一个空的字符串。 </li>
</ul>
<h2 id="6-命名空间的顺序"><a href="#6-命名空间的顺序" class="headerlink" title="6 命名空间的顺序"></a>6 命名空间的顺序</h2><p>PHP中名称解析遵循以下规则：</p>
<p>1 对<strong>完全限定名称</strong>的函数，类和常量的调用在编译时解析。例如 new \A\B 解析为类 A\B。</p>
<p>2 所有的<strong>非限定名称和限定名称（非完全限定名称）</strong>根据当前的导入规则在编译时进行转换。例如，如果命名空间 A\B\C 被导入为 C，那么对 C\D\e() 的调用就会被转换为 A\B\C\D\e()。 </p>
<p>3 在命名空间内部，所有的<em>没有根据导入规则转换</em>的<strong>限定名称</strong>均会在其前面加上当前的命名空间名称。例如，在命名空间 A\B 内部调用 C\D\e()，则 C\D\e() 会被转换为 A\B\C\D\e() 。</p>
<p>4 <strong>非限定类名称</strong>根据当前的导入规则在编译时转换（用全名代替短的导入名称）。例如，如果命名空间 A\B\C 导入为C，则 new C() 被转换为 new A\B\C() 。 </p>
<p>5 在命名空间内部，对<strong>非限定名称</strong>的函数调用是在运行时解析的。<br>  例如对函数 foo() 的调用是这样解析的：</p>
<ul>
<li><p>在当前命名空间中查找名为 A\B\foo() 的函数</p>
</li>
<li><p>尝试查找并调用 全局(global) 空间中的函数 foo()。</p>
</li>
</ul>
<p>6 在命名空间内部对<strong>非限定名称或限定名称类（非完全限定名称）</strong>的调用是在运行时解析的。</p>
<p>  例如调用new C()时的解析过程：</p>
<ul>
<li>在当前命名空间中查找A\B\C类。 </li>
<li><p>尝试自动加载类A\B\C。</p>
<p>而new D\E()的解析过程：</p>
</li>
<li><p>在类名称前面加上当前命名空间名称变成：A\B\D\E，然后查找该类。 </p>
</li>
<li>尝试自动加载类 A\B\D\E。 </li>
</ul>
<p>以一个例子解释（例子来源：<a href="http://www.golaravel.com/php/language.namespaces.rules.html" target="_blank" rel="noopener">PHP中文手册</a>）:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">A</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">B</span>\<span class="title">D</span>, <span class="title">C</span>\<span class="title">E</span> <span class="title">as</span> <span class="title">F</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"></span><br><span class="line">foo();      <span class="comment">// 首先尝试调用定义在命名空间"A"中的函数foo()</span></span><br><span class="line">            <span class="comment">// 再尝试调用全局函数 "foo"</span></span><br><span class="line"></span><br><span class="line">\foo();     <span class="comment">// 调用全局空间函数 "foo" </span></span><br><span class="line"></span><br><span class="line">my\foo();   <span class="comment">// 调用定义在命名空间"A\my"中函数 "foo" </span></span><br><span class="line"></span><br><span class="line">F();        <span class="comment">// 首先尝试调用定义在命名空间"A"中的函数 "F" </span></span><br><span class="line">            <span class="comment">// 再尝试调用全局函数 "F"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> B();    <span class="comment">// 创建命名空间 "A" 中定义的类 "B" 的一个对象</span></span><br><span class="line">            <span class="comment">// 如果未找到，则尝试自动装载类 "A\B"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> D();    <span class="comment">// 使用导入规则，创建命名空间 "B" 中定义的类 "D" 的一个对象</span></span><br><span class="line">            <span class="comment">// 如果未找到，则尝试自动装载类 "B\D"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> F();    <span class="comment">// 使用导入规则，创建命名空间 "C" 中定义的类 "E" 的一个对象</span></span><br><span class="line">            <span class="comment">// 如果未找到，则尝试自动装载类 "C\E"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> \B();   <span class="comment">// 创建定义在全局空间中的类 "B" 的一个对象</span></span><br><span class="line">            <span class="comment">// 如果未发现，则尝试自动装载类 "B"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> \D();   <span class="comment">// 创建定义在全局空间中的类 "D" 的一个对象</span></span><br><span class="line">            <span class="comment">// 如果未发现，则尝试自动装载类 "D"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> \F();   <span class="comment">// 创建定义在全局空间中的类 "F" 的一个对象</span></span><br><span class="line">            <span class="comment">// 如果未发现，则尝试自动装载类 "F"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用另一个命名空间中的静态方法或命名空间函数</span></span><br><span class="line"></span><br><span class="line">B\foo();    <span class="comment">// 调用命名空间 "A\B" 中函数 "foo"</span></span><br><span class="line"></span><br><span class="line">B::foo();   <span class="comment">// 调用命名空间 "A" 中定义的类 "B" 的 "foo" 方法</span></span><br><span class="line">            <span class="comment">// 如果未找到类 "A\B" ，则尝试自动装载类 "A\B"</span></span><br><span class="line"></span><br><span class="line">D::foo();   <span class="comment">// 使用导入规则，调用命名空间 "B" 中定义的类 "D" 的 "foo" 方法</span></span><br><span class="line">            <span class="comment">// 如果类 "B\D" 未找到，则尝试自动装载类 "B\D"</span></span><br><span class="line"></span><br><span class="line">\B\foo();   <span class="comment">// 调用命名空间 "B" 中的函数 "foo" </span></span><br><span class="line"></span><br><span class="line">\B::foo();  <span class="comment">// 调用全局空间中的类 "B" 的 "foo" 方法</span></span><br><span class="line">            <span class="comment">// 如果类 "B" 未找到，则尝试自动装载类 "B"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前命名空间中的静态方法或函数</span></span><br><span class="line"></span><br><span class="line">A\B::foo();   <span class="comment">// 调用命名空间 "A\A" 中定义的类 "B" 的 "foo" 方法</span></span><br><span class="line">              <span class="comment">// 如果类 "A\A\B" 未找到，则尝试自动装载类 "A\A\B"</span></span><br><span class="line"></span><br><span class="line">\A\B::foo();  <span class="comment">// 调用命名空间 "A\B" 中定义的类 "B" 的 "foo" 方法</span></span><br><span class="line">              <span class="comment">// 如果类 "A\B" 未找到，则尝试自动装载类 "A\B"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>滚去睡觉了，goodnight。</p>
<hr>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP魔术变量]]></title>
      <url>/2017/04/01/PHP-%E9%AD%94%E6%9C%AF%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<h1 id="魔术变量"><a href="#魔术变量" class="headerlink" title="魔术变量"></a>魔术变量</h1><hr>
<p>PHP在设计的时候已经预定义了9个超级全局变量、8个魔术变量和13魔术函数，这些变量与函数可以在脚本的任何地方使用（不用预先声明）。魔术变量不区分大小写。</p>
<h2 id="1-LINE"><a href="#1-LINE" class="headerlink" title="1 __LINE__"></a>1 <strong>__LINE__</strong></h2><p>文件中的 <em>当前行号</em> 。<br>EXAMPLE:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'这是第 " '</span>  . <span class="keyword">__LINE__</span> . <span class="string">' " 行'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>OUTPUT</strong>: 这是第 “ 2 “ 行</p>
<h2 id="2-FILE"><a href="#2-FILE" class="headerlink" title="2 __FILE__"></a>2 <strong>__FILE__</strong></h2><p>文件的 <em>完整路径</em> 和 <em>文件名</em> 。<br>若用在被包含文件中，则返回被包含的文件名。<br>NOTE: 超全局变量$_SERVER[‘PHP_SELF’]只返回文件名，而无绝对路径。<br>EXAMPLE:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'该文件位于 " '</span>  . <span class="keyword">__FILE__</span> . <span class="string">' " '</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>OUTPUT</strong>: 该文件位于 “ D:\php-7.1.3-src\Apache24\htdocs\getuser.php “ </p>
<h2 id="3-DIR"><a href="#3-DIR" class="headerlink" title="3 __DIR__"></a>3 <strong>__DIR__</strong></h2><p>文件 <em>所在的目录</em> 。<br>若用在被包括文件中，则返回被包括的文件所在的目录。<br>等价于dirname(__FILE__)。<br>NOTE：不包括末尾的斜杠，除非是根目录。<br>EXAMPLE:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'该文件位于 " '</span>  . <span class="keyword">__DIR__</span> . <span class="string">' " '</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>OUTPUT</strong>: 该文件位于 “ D:\php-7.1.3-src\Apache24\htdocs “</p>
<h2 id="4-FUNCTION"><a href="#4-FUNCTION" class="headerlink" title="4 __FUNCTION__"></a>4 <strong>__FUNCTION__</strong></h2><p><em>函数名称</em> （区分大小写）。<br>EXAMPLE:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>  <span class="string">'函数名为：'</span> . <span class="keyword">__FUNCTION__</span> ;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>OUTPUT</strong>: 函数名为：test </p>
<h2 id="5-CLASS"><a href="#5-CLASS" class="headerlink" title="5 __CLASS__"></a>5 <strong>__CLASS__</strong></h2><p><em>类的名称</em> （区分大小写）。<br>NOTE:</p>
<ul>
<li>类名包括其被声明的作用区域。</li>
<li>对trait也起作用，在trait方法中使用，返回调用trait的类的名字。</li>
</ul>
<p>EXAMPLE:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_print</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'类名为：'</span>  . <span class="keyword">__CLASS__</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$t = <span class="keyword">new</span> test();</span><br><span class="line">$t-&gt;_print();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>OUTPUT</strong>: 类名为：test</p>
<h2 id="6-TRAIT"><a href="#6-TRAIT" class="headerlink" title="6 __TRAIT__"></a>6 <strong>__TRAIT__</strong></h2><p><em>Trait的名字</em> 。<br>NOTE: trait名字包括其被声明的作用区域。<br>EXAMPLE:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Hello '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">trait</span> SayWorld &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::sayHello();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'World!'</span>.__TRAIT__;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHelloWorld</span> <span class="keyword">extends</span> <span class="title">Base</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">SayWorld</span>;</span><br><span class="line">&#125;</span><br><span class="line">$o = <span class="keyword">new</span> MyHelloWorld();</span><br><span class="line">$o-&gt;sayHello();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>OUTPUT</strong>: Hello World!SayWorld </p>
<h2 id="7-METHOD"><a href="#7-METHOD" class="headerlink" title="7 __METHOD__"></a>7 <strong>__METHOD__</strong></h2><p><em>方法名</em> ，与__FUNCTION__类似。</p>
<h2 id="8-NAMESPACE"><a href="#8-NAMESPACE" class="headerlink" title="8 __NAMESPACE__"></a>8 <strong>__NAMESPACE__</strong></h2><p><em>当前命名空间的名称</em> ，在编译时定义。<br>EXAMPLE:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyProject</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'命名空间为："'</span>, <span class="keyword">__NAMESPACE__</span>, <span class="string">'"'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>OUTPUT</strong>: 命名空间为：MyProject</p>
<hr>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[About]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>👩‍💻 Nickname: <a href="www.kathyf3.com">Kathy</a></p>
<p>📮 Email: <a href="mailto://wmiao018@163.com" target="_blank" rel="noopener">wmiao018@163.com</a></p>
<p>💻 Github: <a href="https://github.com/KathyFlores" target="_blank" rel="noopener">@KathyFlores</a></p>
]]></content>
    </entry>
    
  
</search>
